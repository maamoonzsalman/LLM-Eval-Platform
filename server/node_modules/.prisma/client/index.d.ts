
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Model
 * 
 */
export type Model = $Result.DefaultSelection<Prisma.$ModelPayload>
/**
 * Model Experiment
 * 
 */
export type Experiment = $Result.DefaultSelection<Prisma.$ExperimentPayload>
/**
 * Model TestCase
 * 
 */
export type TestCase = $Result.DefaultSelection<Prisma.$TestCasePayload>
/**
 * Model ExperimentTestCases
 * 
 */
export type ExperimentTestCases = $Result.DefaultSelection<Prisma.$ExperimentTestCasesPayload>
/**
 * Model TestCaseGraders
 * 
 */
export type TestCaseGraders = $Result.DefaultSelection<Prisma.$TestCaseGradersPayload>
/**
 * Model TestCaseResults
 * 
 */
export type TestCaseResults = $Result.DefaultSelection<Prisma.$TestCaseResultsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Models
 * const models = await prisma.model.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Models
   * const models = await prisma.model.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.model`: Exposes CRUD operations for the **Model** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Models
    * const models = await prisma.model.findMany()
    * ```
    */
  get model(): Prisma.ModelDelegate<ExtArgs>;

  /**
   * `prisma.experiment`: Exposes CRUD operations for the **Experiment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Experiments
    * const experiments = await prisma.experiment.findMany()
    * ```
    */
  get experiment(): Prisma.ExperimentDelegate<ExtArgs>;

  /**
   * `prisma.testCase`: Exposes CRUD operations for the **TestCase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestCases
    * const testCases = await prisma.testCase.findMany()
    * ```
    */
  get testCase(): Prisma.TestCaseDelegate<ExtArgs>;

  /**
   * `prisma.experimentTestCases`: Exposes CRUD operations for the **ExperimentTestCases** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExperimentTestCases
    * const experimentTestCases = await prisma.experimentTestCases.findMany()
    * ```
    */
  get experimentTestCases(): Prisma.ExperimentTestCasesDelegate<ExtArgs>;

  /**
   * `prisma.testCaseGraders`: Exposes CRUD operations for the **TestCaseGraders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestCaseGraders
    * const testCaseGraders = await prisma.testCaseGraders.findMany()
    * ```
    */
  get testCaseGraders(): Prisma.TestCaseGradersDelegate<ExtArgs>;

  /**
   * `prisma.testCaseResults`: Exposes CRUD operations for the **TestCaseResults** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestCaseResults
    * const testCaseResults = await prisma.testCaseResults.findMany()
    * ```
    */
  get testCaseResults(): Prisma.TestCaseResultsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.1.0
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Model: 'Model',
    Experiment: 'Experiment',
    TestCase: 'TestCase',
    ExperimentTestCases: 'ExperimentTestCases',
    TestCaseGraders: 'TestCaseGraders',
    TestCaseResults: 'TestCaseResults'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "model" | "experiment" | "testCase" | "experimentTestCases" | "testCaseGraders" | "testCaseResults"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Model: {
        payload: Prisma.$ModelPayload<ExtArgs>
        fields: Prisma.ModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          findFirst: {
            args: Prisma.ModelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          findMany: {
            args: Prisma.ModelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>[]
          }
          create: {
            args: Prisma.ModelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          createMany: {
            args: Prisma.ModelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ModelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>[]
          }
          delete: {
            args: Prisma.ModelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          update: {
            args: Prisma.ModelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          deleteMany: {
            args: Prisma.ModelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ModelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ModelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          aggregate: {
            args: Prisma.ModelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModel>
          }
          groupBy: {
            args: Prisma.ModelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModelCountArgs<ExtArgs>
            result: $Utils.Optional<ModelCountAggregateOutputType> | number
          }
        }
      }
      Experiment: {
        payload: Prisma.$ExperimentPayload<ExtArgs>
        fields: Prisma.ExperimentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExperimentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExperimentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          findFirst: {
            args: Prisma.ExperimentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExperimentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          findMany: {
            args: Prisma.ExperimentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>[]
          }
          create: {
            args: Prisma.ExperimentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          createMany: {
            args: Prisma.ExperimentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExperimentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>[]
          }
          delete: {
            args: Prisma.ExperimentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          update: {
            args: Prisma.ExperimentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          deleteMany: {
            args: Prisma.ExperimentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExperimentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExperimentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          aggregate: {
            args: Prisma.ExperimentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExperiment>
          }
          groupBy: {
            args: Prisma.ExperimentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExperimentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExperimentCountArgs<ExtArgs>
            result: $Utils.Optional<ExperimentCountAggregateOutputType> | number
          }
        }
      }
      TestCase: {
        payload: Prisma.$TestCasePayload<ExtArgs>
        fields: Prisma.TestCaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestCaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestCaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          findFirst: {
            args: Prisma.TestCaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestCaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          findMany: {
            args: Prisma.TestCaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>[]
          }
          create: {
            args: Prisma.TestCaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          createMany: {
            args: Prisma.TestCaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestCaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>[]
          }
          delete: {
            args: Prisma.TestCaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          update: {
            args: Prisma.TestCaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          deleteMany: {
            args: Prisma.TestCaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestCaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TestCaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasePayload>
          }
          aggregate: {
            args: Prisma.TestCaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestCase>
          }
          groupBy: {
            args: Prisma.TestCaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestCaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestCaseCountArgs<ExtArgs>
            result: $Utils.Optional<TestCaseCountAggregateOutputType> | number
          }
        }
      }
      ExperimentTestCases: {
        payload: Prisma.$ExperimentTestCasesPayload<ExtArgs>
        fields: Prisma.ExperimentTestCasesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExperimentTestCasesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExperimentTestCasesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload>
          }
          findFirst: {
            args: Prisma.ExperimentTestCasesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExperimentTestCasesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload>
          }
          findMany: {
            args: Prisma.ExperimentTestCasesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload>[]
          }
          create: {
            args: Prisma.ExperimentTestCasesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload>
          }
          createMany: {
            args: Prisma.ExperimentTestCasesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExperimentTestCasesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload>[]
          }
          delete: {
            args: Prisma.ExperimentTestCasesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload>
          }
          update: {
            args: Prisma.ExperimentTestCasesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload>
          }
          deleteMany: {
            args: Prisma.ExperimentTestCasesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExperimentTestCasesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExperimentTestCasesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentTestCasesPayload>
          }
          aggregate: {
            args: Prisma.ExperimentTestCasesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExperimentTestCases>
          }
          groupBy: {
            args: Prisma.ExperimentTestCasesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExperimentTestCasesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExperimentTestCasesCountArgs<ExtArgs>
            result: $Utils.Optional<ExperimentTestCasesCountAggregateOutputType> | number
          }
        }
      }
      TestCaseGraders: {
        payload: Prisma.$TestCaseGradersPayload<ExtArgs>
        fields: Prisma.TestCaseGradersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestCaseGradersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestCaseGradersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload>
          }
          findFirst: {
            args: Prisma.TestCaseGradersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestCaseGradersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload>
          }
          findMany: {
            args: Prisma.TestCaseGradersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload>[]
          }
          create: {
            args: Prisma.TestCaseGradersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload>
          }
          createMany: {
            args: Prisma.TestCaseGradersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestCaseGradersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload>[]
          }
          delete: {
            args: Prisma.TestCaseGradersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload>
          }
          update: {
            args: Prisma.TestCaseGradersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload>
          }
          deleteMany: {
            args: Prisma.TestCaseGradersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestCaseGradersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TestCaseGradersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseGradersPayload>
          }
          aggregate: {
            args: Prisma.TestCaseGradersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestCaseGraders>
          }
          groupBy: {
            args: Prisma.TestCaseGradersGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestCaseGradersGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestCaseGradersCountArgs<ExtArgs>
            result: $Utils.Optional<TestCaseGradersCountAggregateOutputType> | number
          }
        }
      }
      TestCaseResults: {
        payload: Prisma.$TestCaseResultsPayload<ExtArgs>
        fields: Prisma.TestCaseResultsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestCaseResultsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestCaseResultsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload>
          }
          findFirst: {
            args: Prisma.TestCaseResultsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestCaseResultsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload>
          }
          findMany: {
            args: Prisma.TestCaseResultsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload>[]
          }
          create: {
            args: Prisma.TestCaseResultsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload>
          }
          createMany: {
            args: Prisma.TestCaseResultsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestCaseResultsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload>[]
          }
          delete: {
            args: Prisma.TestCaseResultsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload>
          }
          update: {
            args: Prisma.TestCaseResultsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload>
          }
          deleteMany: {
            args: Prisma.TestCaseResultsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestCaseResultsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TestCaseResultsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultsPayload>
          }
          aggregate: {
            args: Prisma.TestCaseResultsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestCaseResults>
          }
          groupBy: {
            args: Prisma.TestCaseResultsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestCaseResultsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestCaseResultsCountArgs<ExtArgs>
            result: $Utils.Optional<TestCaseResultsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ModelCountOutputType
   */

  export type ModelCountOutputType = {
    Experiment: number
    testCaseResults: number
  }

  export type ModelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Experiment?: boolean | ModelCountOutputTypeCountExperimentArgs
    testCaseResults?: boolean | ModelCountOutputTypeCountTestCaseResultsArgs
  }

  // Custom InputTypes
  /**
   * ModelCountOutputType without action
   */
  export type ModelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModelCountOutputType
     */
    select?: ModelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModelCountOutputType without action
   */
  export type ModelCountOutputTypeCountExperimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperimentWhereInput
  }

  /**
   * ModelCountOutputType without action
   */
  export type ModelCountOutputTypeCountTestCaseResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseResultsWhereInput
  }


  /**
   * Count Type ExperimentCountOutputType
   */

  export type ExperimentCountOutputType = {
    experimentTestCases: number
    testCaseResults: number
  }

  export type ExperimentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experimentTestCases?: boolean | ExperimentCountOutputTypeCountExperimentTestCasesArgs
    testCaseResults?: boolean | ExperimentCountOutputTypeCountTestCaseResultsArgs
  }

  // Custom InputTypes
  /**
   * ExperimentCountOutputType without action
   */
  export type ExperimentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentCountOutputType
     */
    select?: ExperimentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExperimentCountOutputType without action
   */
  export type ExperimentCountOutputTypeCountExperimentTestCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperimentTestCasesWhereInput
  }

  /**
   * ExperimentCountOutputType without action
   */
  export type ExperimentCountOutputTypeCountTestCaseResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseResultsWhereInput
  }


  /**
   * Count Type TestCaseCountOutputType
   */

  export type TestCaseCountOutputType = {
    experimentTestCases: number
    graders: number
    testCaseResults: number
  }

  export type TestCaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experimentTestCases?: boolean | TestCaseCountOutputTypeCountExperimentTestCasesArgs
    graders?: boolean | TestCaseCountOutputTypeCountGradersArgs
    testCaseResults?: boolean | TestCaseCountOutputTypeCountTestCaseResultsArgs
  }

  // Custom InputTypes
  /**
   * TestCaseCountOutputType without action
   */
  export type TestCaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseCountOutputType
     */
    select?: TestCaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TestCaseCountOutputType without action
   */
  export type TestCaseCountOutputTypeCountExperimentTestCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperimentTestCasesWhereInput
  }

  /**
   * TestCaseCountOutputType without action
   */
  export type TestCaseCountOutputTypeCountGradersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseGradersWhereInput
  }

  /**
   * TestCaseCountOutputType without action
   */
  export type TestCaseCountOutputTypeCountTestCaseResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseResultsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Model
   */

  export type AggregateModel = {
    _count: ModelCountAggregateOutputType | null
    _min: ModelMinAggregateOutputType | null
    _max: ModelMaxAggregateOutputType | null
  }

  export type ModelMinAggregateOutputType = {
    id: string | null
    name: string | null
    provider: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ModelMaxAggregateOutputType = {
    id: string | null
    name: string | null
    provider: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ModelCountAggregateOutputType = {
    id: number
    name: number
    provider: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ModelMinAggregateInputType = {
    id?: true
    name?: true
    provider?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ModelMaxAggregateInputType = {
    id?: true
    name?: true
    provider?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ModelCountAggregateInputType = {
    id?: true
    name?: true
    provider?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ModelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Model to aggregate.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Models
    **/
    _count?: true | ModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModelMaxAggregateInputType
  }

  export type GetModelAggregateType<T extends ModelAggregateArgs> = {
        [P in keyof T & keyof AggregateModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModel[P]>
      : GetScalarType<T[P], AggregateModel[P]>
  }




  export type ModelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModelWhereInput
    orderBy?: ModelOrderByWithAggregationInput | ModelOrderByWithAggregationInput[]
    by: ModelScalarFieldEnum[] | ModelScalarFieldEnum
    having?: ModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModelCountAggregateInputType | true
    _min?: ModelMinAggregateInputType
    _max?: ModelMaxAggregateInputType
  }

  export type ModelGroupByOutputType = {
    id: string
    name: string
    provider: string
    createdAt: Date
    updatedAt: Date
    _count: ModelCountAggregateOutputType | null
    _min: ModelMinAggregateOutputType | null
    _max: ModelMaxAggregateOutputType | null
  }

  type GetModelGroupByPayload<T extends ModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModelGroupByOutputType[P]>
            : GetScalarType<T[P], ModelGroupByOutputType[P]>
        }
      >
    >


  export type ModelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    provider?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Experiment?: boolean | Model$ExperimentArgs<ExtArgs>
    testCaseResults?: boolean | Model$testCaseResultsArgs<ExtArgs>
    _count?: boolean | ModelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["model"]>

  export type ModelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    provider?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["model"]>

  export type ModelSelectScalar = {
    id?: boolean
    name?: boolean
    provider?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ModelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Experiment?: boolean | Model$ExperimentArgs<ExtArgs>
    testCaseResults?: boolean | Model$testCaseResultsArgs<ExtArgs>
    _count?: boolean | ModelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ModelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ModelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Model"
    objects: {
      Experiment: Prisma.$ExperimentPayload<ExtArgs>[]
      testCaseResults: Prisma.$TestCaseResultsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      provider: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["model"]>
    composites: {}
  }

  type ModelGetPayload<S extends boolean | null | undefined | ModelDefaultArgs> = $Result.GetResult<Prisma.$ModelPayload, S>

  type ModelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ModelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModelCountAggregateInputType | true
    }

  export interface ModelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Model'], meta: { name: 'Model' } }
    /**
     * Find zero or one Model that matches the filter.
     * @param {ModelFindUniqueArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ModelFindUniqueArgs>(args: SelectSubset<T, ModelFindUniqueArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Model that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ModelFindUniqueOrThrowArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ModelFindUniqueOrThrowArgs>(args: SelectSubset<T, ModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Model that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelFindFirstArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ModelFindFirstArgs>(args?: SelectSubset<T, ModelFindFirstArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Model that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelFindFirstOrThrowArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ModelFindFirstOrThrowArgs>(args?: SelectSubset<T, ModelFindFirstOrThrowArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Models that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Models
     * const models = await prisma.model.findMany()
     * 
     * // Get first 10 Models
     * const models = await prisma.model.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modelWithIdOnly = await prisma.model.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ModelFindManyArgs>(args?: SelectSubset<T, ModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Model.
     * @param {ModelCreateArgs} args - Arguments to create a Model.
     * @example
     * // Create one Model
     * const Model = await prisma.model.create({
     *   data: {
     *     // ... data to create a Model
     *   }
     * })
     * 
     */
    create<T extends ModelCreateArgs>(args: SelectSubset<T, ModelCreateArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Models.
     * @param {ModelCreateManyArgs} args - Arguments to create many Models.
     * @example
     * // Create many Models
     * const model = await prisma.model.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ModelCreateManyArgs>(args?: SelectSubset<T, ModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Models and returns the data saved in the database.
     * @param {ModelCreateManyAndReturnArgs} args - Arguments to create many Models.
     * @example
     * // Create many Models
     * const model = await prisma.model.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Models and only return the `id`
     * const modelWithIdOnly = await prisma.model.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ModelCreateManyAndReturnArgs>(args?: SelectSubset<T, ModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Model.
     * @param {ModelDeleteArgs} args - Arguments to delete one Model.
     * @example
     * // Delete one Model
     * const Model = await prisma.model.delete({
     *   where: {
     *     // ... filter to delete one Model
     *   }
     * })
     * 
     */
    delete<T extends ModelDeleteArgs>(args: SelectSubset<T, ModelDeleteArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Model.
     * @param {ModelUpdateArgs} args - Arguments to update one Model.
     * @example
     * // Update one Model
     * const model = await prisma.model.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ModelUpdateArgs>(args: SelectSubset<T, ModelUpdateArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Models.
     * @param {ModelDeleteManyArgs} args - Arguments to filter Models to delete.
     * @example
     * // Delete a few Models
     * const { count } = await prisma.model.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ModelDeleteManyArgs>(args?: SelectSubset<T, ModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Models.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Models
     * const model = await prisma.model.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ModelUpdateManyArgs>(args: SelectSubset<T, ModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Model.
     * @param {ModelUpsertArgs} args - Arguments to update or create a Model.
     * @example
     * // Update or create a Model
     * const model = await prisma.model.upsert({
     *   create: {
     *     // ... data to create a Model
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Model we want to update
     *   }
     * })
     */
    upsert<T extends ModelUpsertArgs>(args: SelectSubset<T, ModelUpsertArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Models.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelCountArgs} args - Arguments to filter Models to count.
     * @example
     * // Count the number of Models
     * const count = await prisma.model.count({
     *   where: {
     *     // ... the filter for the Models we want to count
     *   }
     * })
    **/
    count<T extends ModelCountArgs>(
      args?: Subset<T, ModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Model.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModelAggregateArgs>(args: Subset<T, ModelAggregateArgs>): Prisma.PrismaPromise<GetModelAggregateType<T>>

    /**
     * Group by Model.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModelGroupByArgs['orderBy'] }
        : { orderBy?: ModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Model model
   */
  readonly fields: ModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Model.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Experiment<T extends Model$ExperimentArgs<ExtArgs> = {}>(args?: Subset<T, Model$ExperimentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findMany"> | Null>
    testCaseResults<T extends Model$testCaseResultsArgs<ExtArgs> = {}>(args?: Subset<T, Model$testCaseResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Model model
   */ 
  interface ModelFieldRefs {
    readonly id: FieldRef<"Model", 'String'>
    readonly name: FieldRef<"Model", 'String'>
    readonly provider: FieldRef<"Model", 'String'>
    readonly createdAt: FieldRef<"Model", 'DateTime'>
    readonly updatedAt: FieldRef<"Model", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Model findUnique
   */
  export type ModelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model findUniqueOrThrow
   */
  export type ModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model findFirst
   */
  export type ModelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Models.
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Models.
     */
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Model findFirstOrThrow
   */
  export type ModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Models.
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Models.
     */
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Model findMany
   */
  export type ModelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Models to fetch.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Models.
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Model create
   */
  export type ModelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * The data needed to create a Model.
     */
    data: XOR<ModelCreateInput, ModelUncheckedCreateInput>
  }

  /**
   * Model createMany
   */
  export type ModelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Models.
     */
    data: ModelCreateManyInput | ModelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Model createManyAndReturn
   */
  export type ModelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Models.
     */
    data: ModelCreateManyInput | ModelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Model update
   */
  export type ModelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * The data needed to update a Model.
     */
    data: XOR<ModelUpdateInput, ModelUncheckedUpdateInput>
    /**
     * Choose, which Model to update.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model updateMany
   */
  export type ModelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Models.
     */
    data: XOR<ModelUpdateManyMutationInput, ModelUncheckedUpdateManyInput>
    /**
     * Filter which Models to update
     */
    where?: ModelWhereInput
  }

  /**
   * Model upsert
   */
  export type ModelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * The filter to search for the Model to update in case it exists.
     */
    where: ModelWhereUniqueInput
    /**
     * In case the Model found by the `where` argument doesn't exist, create a new Model with this data.
     */
    create: XOR<ModelCreateInput, ModelUncheckedCreateInput>
    /**
     * In case the Model was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModelUpdateInput, ModelUncheckedUpdateInput>
  }

  /**
   * Model delete
   */
  export type ModelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter which Model to delete.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model deleteMany
   */
  export type ModelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Models to delete
     */
    where?: ModelWhereInput
  }

  /**
   * Model.Experiment
   */
  export type Model$ExperimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    where?: ExperimentWhereInput
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    cursor?: ExperimentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperimentScalarFieldEnum | ExperimentScalarFieldEnum[]
  }

  /**
   * Model.testCaseResults
   */
  export type Model$testCaseResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    where?: TestCaseResultsWhereInput
    orderBy?: TestCaseResultsOrderByWithRelationInput | TestCaseResultsOrderByWithRelationInput[]
    cursor?: TestCaseResultsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestCaseResultsScalarFieldEnum | TestCaseResultsScalarFieldEnum[]
  }

  /**
   * Model without action
   */
  export type ModelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
  }


  /**
   * Model Experiment
   */

  export type AggregateExperiment = {
    _count: ExperimentCountAggregateOutputType | null
    _min: ExperimentMinAggregateOutputType | null
    _max: ExperimentMaxAggregateOutputType | null
  }

  export type ExperimentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    systemPrompt: string | null
    modelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExperimentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    systemPrompt: string | null
    modelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExperimentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    systemPrompt: number
    modelId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExperimentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    systemPrompt?: true
    modelId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExperimentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    systemPrompt?: true
    modelId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExperimentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    systemPrompt?: true
    modelId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExperimentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experiment to aggregate.
     */
    where?: ExperimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiments to fetch.
     */
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExperimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Experiments
    **/
    _count?: true | ExperimentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExperimentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExperimentMaxAggregateInputType
  }

  export type GetExperimentAggregateType<T extends ExperimentAggregateArgs> = {
        [P in keyof T & keyof AggregateExperiment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExperiment[P]>
      : GetScalarType<T[P], AggregateExperiment[P]>
  }




  export type ExperimentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperimentWhereInput
    orderBy?: ExperimentOrderByWithAggregationInput | ExperimentOrderByWithAggregationInput[]
    by: ExperimentScalarFieldEnum[] | ExperimentScalarFieldEnum
    having?: ExperimentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExperimentCountAggregateInputType | true
    _min?: ExperimentMinAggregateInputType
    _max?: ExperimentMaxAggregateInputType
  }

  export type ExperimentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    systemPrompt: string
    modelId: string
    createdAt: Date
    updatedAt: Date
    _count: ExperimentCountAggregateOutputType | null
    _min: ExperimentMinAggregateOutputType | null
    _max: ExperimentMaxAggregateOutputType | null
  }

  type GetExperimentGroupByPayload<T extends ExperimentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExperimentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExperimentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExperimentGroupByOutputType[P]>
            : GetScalarType<T[P], ExperimentGroupByOutputType[P]>
        }
      >
    >


  export type ExperimentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    systemPrompt?: boolean
    modelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    model?: boolean | ModelDefaultArgs<ExtArgs>
    experimentTestCases?: boolean | Experiment$experimentTestCasesArgs<ExtArgs>
    testCaseResults?: boolean | Experiment$testCaseResultsArgs<ExtArgs>
    _count?: boolean | ExperimentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experiment"]>

  export type ExperimentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    systemPrompt?: boolean
    modelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    model?: boolean | ModelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experiment"]>

  export type ExperimentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    systemPrompt?: boolean
    modelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExperimentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    model?: boolean | ModelDefaultArgs<ExtArgs>
    experimentTestCases?: boolean | Experiment$experimentTestCasesArgs<ExtArgs>
    testCaseResults?: boolean | Experiment$testCaseResultsArgs<ExtArgs>
    _count?: boolean | ExperimentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExperimentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    model?: boolean | ModelDefaultArgs<ExtArgs>
  }

  export type $ExperimentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Experiment"
    objects: {
      model: Prisma.$ModelPayload<ExtArgs>
      experimentTestCases: Prisma.$ExperimentTestCasesPayload<ExtArgs>[]
      testCaseResults: Prisma.$TestCaseResultsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      systemPrompt: string
      modelId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["experiment"]>
    composites: {}
  }

  type ExperimentGetPayload<S extends boolean | null | undefined | ExperimentDefaultArgs> = $Result.GetResult<Prisma.$ExperimentPayload, S>

  type ExperimentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExperimentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExperimentCountAggregateInputType | true
    }

  export interface ExperimentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Experiment'], meta: { name: 'Experiment' } }
    /**
     * Find zero or one Experiment that matches the filter.
     * @param {ExperimentFindUniqueArgs} args - Arguments to find a Experiment
     * @example
     * // Get one Experiment
     * const experiment = await prisma.experiment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExperimentFindUniqueArgs>(args: SelectSubset<T, ExperimentFindUniqueArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Experiment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExperimentFindUniqueOrThrowArgs} args - Arguments to find a Experiment
     * @example
     * // Get one Experiment
     * const experiment = await prisma.experiment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExperimentFindUniqueOrThrowArgs>(args: SelectSubset<T, ExperimentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Experiment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentFindFirstArgs} args - Arguments to find a Experiment
     * @example
     * // Get one Experiment
     * const experiment = await prisma.experiment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExperimentFindFirstArgs>(args?: SelectSubset<T, ExperimentFindFirstArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Experiment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentFindFirstOrThrowArgs} args - Arguments to find a Experiment
     * @example
     * // Get one Experiment
     * const experiment = await prisma.experiment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExperimentFindFirstOrThrowArgs>(args?: SelectSubset<T, ExperimentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Experiments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Experiments
     * const experiments = await prisma.experiment.findMany()
     * 
     * // Get first 10 Experiments
     * const experiments = await prisma.experiment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experimentWithIdOnly = await prisma.experiment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExperimentFindManyArgs>(args?: SelectSubset<T, ExperimentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Experiment.
     * @param {ExperimentCreateArgs} args - Arguments to create a Experiment.
     * @example
     * // Create one Experiment
     * const Experiment = await prisma.experiment.create({
     *   data: {
     *     // ... data to create a Experiment
     *   }
     * })
     * 
     */
    create<T extends ExperimentCreateArgs>(args: SelectSubset<T, ExperimentCreateArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Experiments.
     * @param {ExperimentCreateManyArgs} args - Arguments to create many Experiments.
     * @example
     * // Create many Experiments
     * const experiment = await prisma.experiment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExperimentCreateManyArgs>(args?: SelectSubset<T, ExperimentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Experiments and returns the data saved in the database.
     * @param {ExperimentCreateManyAndReturnArgs} args - Arguments to create many Experiments.
     * @example
     * // Create many Experiments
     * const experiment = await prisma.experiment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Experiments and only return the `id`
     * const experimentWithIdOnly = await prisma.experiment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExperimentCreateManyAndReturnArgs>(args?: SelectSubset<T, ExperimentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Experiment.
     * @param {ExperimentDeleteArgs} args - Arguments to delete one Experiment.
     * @example
     * // Delete one Experiment
     * const Experiment = await prisma.experiment.delete({
     *   where: {
     *     // ... filter to delete one Experiment
     *   }
     * })
     * 
     */
    delete<T extends ExperimentDeleteArgs>(args: SelectSubset<T, ExperimentDeleteArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Experiment.
     * @param {ExperimentUpdateArgs} args - Arguments to update one Experiment.
     * @example
     * // Update one Experiment
     * const experiment = await prisma.experiment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExperimentUpdateArgs>(args: SelectSubset<T, ExperimentUpdateArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Experiments.
     * @param {ExperimentDeleteManyArgs} args - Arguments to filter Experiments to delete.
     * @example
     * // Delete a few Experiments
     * const { count } = await prisma.experiment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExperimentDeleteManyArgs>(args?: SelectSubset<T, ExperimentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Experiments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Experiments
     * const experiment = await prisma.experiment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExperimentUpdateManyArgs>(args: SelectSubset<T, ExperimentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Experiment.
     * @param {ExperimentUpsertArgs} args - Arguments to update or create a Experiment.
     * @example
     * // Update or create a Experiment
     * const experiment = await prisma.experiment.upsert({
     *   create: {
     *     // ... data to create a Experiment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Experiment we want to update
     *   }
     * })
     */
    upsert<T extends ExperimentUpsertArgs>(args: SelectSubset<T, ExperimentUpsertArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Experiments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentCountArgs} args - Arguments to filter Experiments to count.
     * @example
     * // Count the number of Experiments
     * const count = await prisma.experiment.count({
     *   where: {
     *     // ... the filter for the Experiments we want to count
     *   }
     * })
    **/
    count<T extends ExperimentCountArgs>(
      args?: Subset<T, ExperimentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExperimentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Experiment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExperimentAggregateArgs>(args: Subset<T, ExperimentAggregateArgs>): Prisma.PrismaPromise<GetExperimentAggregateType<T>>

    /**
     * Group by Experiment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExperimentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExperimentGroupByArgs['orderBy'] }
        : { orderBy?: ExperimentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExperimentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperimentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Experiment model
   */
  readonly fields: ExperimentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Experiment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExperimentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    model<T extends ModelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ModelDefaultArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    experimentTestCases<T extends Experiment$experimentTestCasesArgs<ExtArgs> = {}>(args?: Subset<T, Experiment$experimentTestCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "findMany"> | Null>
    testCaseResults<T extends Experiment$testCaseResultsArgs<ExtArgs> = {}>(args?: Subset<T, Experiment$testCaseResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Experiment model
   */ 
  interface ExperimentFieldRefs {
    readonly id: FieldRef<"Experiment", 'String'>
    readonly name: FieldRef<"Experiment", 'String'>
    readonly description: FieldRef<"Experiment", 'String'>
    readonly systemPrompt: FieldRef<"Experiment", 'String'>
    readonly modelId: FieldRef<"Experiment", 'String'>
    readonly createdAt: FieldRef<"Experiment", 'DateTime'>
    readonly updatedAt: FieldRef<"Experiment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Experiment findUnique
   */
  export type ExperimentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiment to fetch.
     */
    where: ExperimentWhereUniqueInput
  }

  /**
   * Experiment findUniqueOrThrow
   */
  export type ExperimentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiment to fetch.
     */
    where: ExperimentWhereUniqueInput
  }

  /**
   * Experiment findFirst
   */
  export type ExperimentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiment to fetch.
     */
    where?: ExperimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiments to fetch.
     */
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiments.
     */
    cursor?: ExperimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiments.
     */
    distinct?: ExperimentScalarFieldEnum | ExperimentScalarFieldEnum[]
  }

  /**
   * Experiment findFirstOrThrow
   */
  export type ExperimentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiment to fetch.
     */
    where?: ExperimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiments to fetch.
     */
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiments.
     */
    cursor?: ExperimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiments.
     */
    distinct?: ExperimentScalarFieldEnum | ExperimentScalarFieldEnum[]
  }

  /**
   * Experiment findMany
   */
  export type ExperimentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiments to fetch.
     */
    where?: ExperimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiments to fetch.
     */
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Experiments.
     */
    cursor?: ExperimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiments.
     */
    skip?: number
    distinct?: ExperimentScalarFieldEnum | ExperimentScalarFieldEnum[]
  }

  /**
   * Experiment create
   */
  export type ExperimentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * The data needed to create a Experiment.
     */
    data: XOR<ExperimentCreateInput, ExperimentUncheckedCreateInput>
  }

  /**
   * Experiment createMany
   */
  export type ExperimentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Experiments.
     */
    data: ExperimentCreateManyInput | ExperimentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Experiment createManyAndReturn
   */
  export type ExperimentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Experiments.
     */
    data: ExperimentCreateManyInput | ExperimentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Experiment update
   */
  export type ExperimentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * The data needed to update a Experiment.
     */
    data: XOR<ExperimentUpdateInput, ExperimentUncheckedUpdateInput>
    /**
     * Choose, which Experiment to update.
     */
    where: ExperimentWhereUniqueInput
  }

  /**
   * Experiment updateMany
   */
  export type ExperimentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Experiments.
     */
    data: XOR<ExperimentUpdateManyMutationInput, ExperimentUncheckedUpdateManyInput>
    /**
     * Filter which Experiments to update
     */
    where?: ExperimentWhereInput
  }

  /**
   * Experiment upsert
   */
  export type ExperimentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * The filter to search for the Experiment to update in case it exists.
     */
    where: ExperimentWhereUniqueInput
    /**
     * In case the Experiment found by the `where` argument doesn't exist, create a new Experiment with this data.
     */
    create: XOR<ExperimentCreateInput, ExperimentUncheckedCreateInput>
    /**
     * In case the Experiment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExperimentUpdateInput, ExperimentUncheckedUpdateInput>
  }

  /**
   * Experiment delete
   */
  export type ExperimentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter which Experiment to delete.
     */
    where: ExperimentWhereUniqueInput
  }

  /**
   * Experiment deleteMany
   */
  export type ExperimentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experiments to delete
     */
    where?: ExperimentWhereInput
  }

  /**
   * Experiment.experimentTestCases
   */
  export type Experiment$experimentTestCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    where?: ExperimentTestCasesWhereInput
    orderBy?: ExperimentTestCasesOrderByWithRelationInput | ExperimentTestCasesOrderByWithRelationInput[]
    cursor?: ExperimentTestCasesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperimentTestCasesScalarFieldEnum | ExperimentTestCasesScalarFieldEnum[]
  }

  /**
   * Experiment.testCaseResults
   */
  export type Experiment$testCaseResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    where?: TestCaseResultsWhereInput
    orderBy?: TestCaseResultsOrderByWithRelationInput | TestCaseResultsOrderByWithRelationInput[]
    cursor?: TestCaseResultsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestCaseResultsScalarFieldEnum | TestCaseResultsScalarFieldEnum[]
  }

  /**
   * Experiment without action
   */
  export type ExperimentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
  }


  /**
   * Model TestCase
   */

  export type AggregateTestCase = {
    _count: TestCaseCountAggregateOutputType | null
    _min: TestCaseMinAggregateOutputType | null
    _max: TestCaseMaxAggregateOutputType | null
  }

  export type TestCaseMinAggregateOutputType = {
    id: string | null
    inputMessage: string | null
    expectedOutput: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCaseMaxAggregateOutputType = {
    id: string | null
    inputMessage: string | null
    expectedOutput: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCaseCountAggregateOutputType = {
    id: number
    inputMessage: number
    expectedOutput: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TestCaseMinAggregateInputType = {
    id?: true
    inputMessage?: true
    expectedOutput?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCaseMaxAggregateInputType = {
    id?: true
    inputMessage?: true
    expectedOutput?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCaseCountAggregateInputType = {
    id?: true
    inputMessage?: true
    expectedOutput?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TestCaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCase to aggregate.
     */
    where?: TestCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCaseOrderByWithRelationInput | TestCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestCases
    **/
    _count?: true | TestCaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestCaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestCaseMaxAggregateInputType
  }

  export type GetTestCaseAggregateType<T extends TestCaseAggregateArgs> = {
        [P in keyof T & keyof AggregateTestCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestCase[P]>
      : GetScalarType<T[P], AggregateTestCase[P]>
  }




  export type TestCaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseWhereInput
    orderBy?: TestCaseOrderByWithAggregationInput | TestCaseOrderByWithAggregationInput[]
    by: TestCaseScalarFieldEnum[] | TestCaseScalarFieldEnum
    having?: TestCaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCaseCountAggregateInputType | true
    _min?: TestCaseMinAggregateInputType
    _max?: TestCaseMaxAggregateInputType
  }

  export type TestCaseGroupByOutputType = {
    id: string
    inputMessage: string
    expectedOutput: string | null
    createdAt: Date
    updatedAt: Date
    _count: TestCaseCountAggregateOutputType | null
    _min: TestCaseMinAggregateOutputType | null
    _max: TestCaseMaxAggregateOutputType | null
  }

  type GetTestCaseGroupByPayload<T extends TestCaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestCaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestCaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestCaseGroupByOutputType[P]>
            : GetScalarType<T[P], TestCaseGroupByOutputType[P]>
        }
      >
    >


  export type TestCaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inputMessage?: boolean
    expectedOutput?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    experimentTestCases?: boolean | TestCase$experimentTestCasesArgs<ExtArgs>
    graders?: boolean | TestCase$gradersArgs<ExtArgs>
    testCaseResults?: boolean | TestCase$testCaseResultsArgs<ExtArgs>
    _count?: boolean | TestCaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCase"]>

  export type TestCaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inputMessage?: boolean
    expectedOutput?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["testCase"]>

  export type TestCaseSelectScalar = {
    id?: boolean
    inputMessage?: boolean
    expectedOutput?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TestCaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experimentTestCases?: boolean | TestCase$experimentTestCasesArgs<ExtArgs>
    graders?: boolean | TestCase$gradersArgs<ExtArgs>
    testCaseResults?: boolean | TestCase$testCaseResultsArgs<ExtArgs>
    _count?: boolean | TestCaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TestCaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TestCasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestCase"
    objects: {
      experimentTestCases: Prisma.$ExperimentTestCasesPayload<ExtArgs>[]
      graders: Prisma.$TestCaseGradersPayload<ExtArgs>[]
      testCaseResults: Prisma.$TestCaseResultsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      inputMessage: string
      expectedOutput: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["testCase"]>
    composites: {}
  }

  type TestCaseGetPayload<S extends boolean | null | undefined | TestCaseDefaultArgs> = $Result.GetResult<Prisma.$TestCasePayload, S>

  type TestCaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TestCaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TestCaseCountAggregateInputType | true
    }

  export interface TestCaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestCase'], meta: { name: 'TestCase' } }
    /**
     * Find zero or one TestCase that matches the filter.
     * @param {TestCaseFindUniqueArgs} args - Arguments to find a TestCase
     * @example
     * // Get one TestCase
     * const testCase = await prisma.testCase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestCaseFindUniqueArgs>(args: SelectSubset<T, TestCaseFindUniqueArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TestCase that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TestCaseFindUniqueOrThrowArgs} args - Arguments to find a TestCase
     * @example
     * // Get one TestCase
     * const testCase = await prisma.testCase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestCaseFindUniqueOrThrowArgs>(args: SelectSubset<T, TestCaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TestCase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseFindFirstArgs} args - Arguments to find a TestCase
     * @example
     * // Get one TestCase
     * const testCase = await prisma.testCase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestCaseFindFirstArgs>(args?: SelectSubset<T, TestCaseFindFirstArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TestCase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseFindFirstOrThrowArgs} args - Arguments to find a TestCase
     * @example
     * // Get one TestCase
     * const testCase = await prisma.testCase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestCaseFindFirstOrThrowArgs>(args?: SelectSubset<T, TestCaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TestCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestCases
     * const testCases = await prisma.testCase.findMany()
     * 
     * // Get first 10 TestCases
     * const testCases = await prisma.testCase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testCaseWithIdOnly = await prisma.testCase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestCaseFindManyArgs>(args?: SelectSubset<T, TestCaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TestCase.
     * @param {TestCaseCreateArgs} args - Arguments to create a TestCase.
     * @example
     * // Create one TestCase
     * const TestCase = await prisma.testCase.create({
     *   data: {
     *     // ... data to create a TestCase
     *   }
     * })
     * 
     */
    create<T extends TestCaseCreateArgs>(args: SelectSubset<T, TestCaseCreateArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TestCases.
     * @param {TestCaseCreateManyArgs} args - Arguments to create many TestCases.
     * @example
     * // Create many TestCases
     * const testCase = await prisma.testCase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestCaseCreateManyArgs>(args?: SelectSubset<T, TestCaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TestCases and returns the data saved in the database.
     * @param {TestCaseCreateManyAndReturnArgs} args - Arguments to create many TestCases.
     * @example
     * // Create many TestCases
     * const testCase = await prisma.testCase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TestCases and only return the `id`
     * const testCaseWithIdOnly = await prisma.testCase.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestCaseCreateManyAndReturnArgs>(args?: SelectSubset<T, TestCaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TestCase.
     * @param {TestCaseDeleteArgs} args - Arguments to delete one TestCase.
     * @example
     * // Delete one TestCase
     * const TestCase = await prisma.testCase.delete({
     *   where: {
     *     // ... filter to delete one TestCase
     *   }
     * })
     * 
     */
    delete<T extends TestCaseDeleteArgs>(args: SelectSubset<T, TestCaseDeleteArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TestCase.
     * @param {TestCaseUpdateArgs} args - Arguments to update one TestCase.
     * @example
     * // Update one TestCase
     * const testCase = await prisma.testCase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestCaseUpdateArgs>(args: SelectSubset<T, TestCaseUpdateArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TestCases.
     * @param {TestCaseDeleteManyArgs} args - Arguments to filter TestCases to delete.
     * @example
     * // Delete a few TestCases
     * const { count } = await prisma.testCase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestCaseDeleteManyArgs>(args?: SelectSubset<T, TestCaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestCases
     * const testCase = await prisma.testCase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestCaseUpdateManyArgs>(args: SelectSubset<T, TestCaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestCase.
     * @param {TestCaseUpsertArgs} args - Arguments to update or create a TestCase.
     * @example
     * // Update or create a TestCase
     * const testCase = await prisma.testCase.upsert({
     *   create: {
     *     // ... data to create a TestCase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestCase we want to update
     *   }
     * })
     */
    upsert<T extends TestCaseUpsertArgs>(args: SelectSubset<T, TestCaseUpsertArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseCountArgs} args - Arguments to filter TestCases to count.
     * @example
     * // Count the number of TestCases
     * const count = await prisma.testCase.count({
     *   where: {
     *     // ... the filter for the TestCases we want to count
     *   }
     * })
    **/
    count<T extends TestCaseCountArgs>(
      args?: Subset<T, TestCaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestCaseAggregateArgs>(args: Subset<T, TestCaseAggregateArgs>): Prisma.PrismaPromise<GetTestCaseAggregateType<T>>

    /**
     * Group by TestCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestCaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestCaseGroupByArgs['orderBy'] }
        : { orderBy?: TestCaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestCaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestCase model
   */
  readonly fields: TestCaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestCase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestCaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    experimentTestCases<T extends TestCase$experimentTestCasesArgs<ExtArgs> = {}>(args?: Subset<T, TestCase$experimentTestCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "findMany"> | Null>
    graders<T extends TestCase$gradersArgs<ExtArgs> = {}>(args?: Subset<T, TestCase$gradersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "findMany"> | Null>
    testCaseResults<T extends TestCase$testCaseResultsArgs<ExtArgs> = {}>(args?: Subset<T, TestCase$testCaseResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestCase model
   */ 
  interface TestCaseFieldRefs {
    readonly id: FieldRef<"TestCase", 'String'>
    readonly inputMessage: FieldRef<"TestCase", 'String'>
    readonly expectedOutput: FieldRef<"TestCase", 'String'>
    readonly createdAt: FieldRef<"TestCase", 'DateTime'>
    readonly updatedAt: FieldRef<"TestCase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TestCase findUnique
   */
  export type TestCaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCase to fetch.
     */
    where: TestCaseWhereUniqueInput
  }

  /**
   * TestCase findUniqueOrThrow
   */
  export type TestCaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCase to fetch.
     */
    where: TestCaseWhereUniqueInput
  }

  /**
   * TestCase findFirst
   */
  export type TestCaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCase to fetch.
     */
    where?: TestCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCaseOrderByWithRelationInput | TestCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCases.
     */
    cursor?: TestCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCases.
     */
    distinct?: TestCaseScalarFieldEnum | TestCaseScalarFieldEnum[]
  }

  /**
   * TestCase findFirstOrThrow
   */
  export type TestCaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCase to fetch.
     */
    where?: TestCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCaseOrderByWithRelationInput | TestCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCases.
     */
    cursor?: TestCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCases.
     */
    distinct?: TestCaseScalarFieldEnum | TestCaseScalarFieldEnum[]
  }

  /**
   * TestCase findMany
   */
  export type TestCaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter, which TestCases to fetch.
     */
    where?: TestCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCaseOrderByWithRelationInput | TestCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestCases.
     */
    cursor?: TestCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    distinct?: TestCaseScalarFieldEnum | TestCaseScalarFieldEnum[]
  }

  /**
   * TestCase create
   */
  export type TestCaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * The data needed to create a TestCase.
     */
    data: XOR<TestCaseCreateInput, TestCaseUncheckedCreateInput>
  }

  /**
   * TestCase createMany
   */
  export type TestCaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestCases.
     */
    data: TestCaseCreateManyInput | TestCaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestCase createManyAndReturn
   */
  export type TestCaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TestCases.
     */
    data: TestCaseCreateManyInput | TestCaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestCase update
   */
  export type TestCaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * The data needed to update a TestCase.
     */
    data: XOR<TestCaseUpdateInput, TestCaseUncheckedUpdateInput>
    /**
     * Choose, which TestCase to update.
     */
    where: TestCaseWhereUniqueInput
  }

  /**
   * TestCase updateMany
   */
  export type TestCaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestCases.
     */
    data: XOR<TestCaseUpdateManyMutationInput, TestCaseUncheckedUpdateManyInput>
    /**
     * Filter which TestCases to update
     */
    where?: TestCaseWhereInput
  }

  /**
   * TestCase upsert
   */
  export type TestCaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * The filter to search for the TestCase to update in case it exists.
     */
    where: TestCaseWhereUniqueInput
    /**
     * In case the TestCase found by the `where` argument doesn't exist, create a new TestCase with this data.
     */
    create: XOR<TestCaseCreateInput, TestCaseUncheckedCreateInput>
    /**
     * In case the TestCase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestCaseUpdateInput, TestCaseUncheckedUpdateInput>
  }

  /**
   * TestCase delete
   */
  export type TestCaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
    /**
     * Filter which TestCase to delete.
     */
    where: TestCaseWhereUniqueInput
  }

  /**
   * TestCase deleteMany
   */
  export type TestCaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCases to delete
     */
    where?: TestCaseWhereInput
  }

  /**
   * TestCase.experimentTestCases
   */
  export type TestCase$experimentTestCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    where?: ExperimentTestCasesWhereInput
    orderBy?: ExperimentTestCasesOrderByWithRelationInput | ExperimentTestCasesOrderByWithRelationInput[]
    cursor?: ExperimentTestCasesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperimentTestCasesScalarFieldEnum | ExperimentTestCasesScalarFieldEnum[]
  }

  /**
   * TestCase.graders
   */
  export type TestCase$gradersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    where?: TestCaseGradersWhereInput
    orderBy?: TestCaseGradersOrderByWithRelationInput | TestCaseGradersOrderByWithRelationInput[]
    cursor?: TestCaseGradersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestCaseGradersScalarFieldEnum | TestCaseGradersScalarFieldEnum[]
  }

  /**
   * TestCase.testCaseResults
   */
  export type TestCase$testCaseResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    where?: TestCaseResultsWhereInput
    orderBy?: TestCaseResultsOrderByWithRelationInput | TestCaseResultsOrderByWithRelationInput[]
    cursor?: TestCaseResultsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestCaseResultsScalarFieldEnum | TestCaseResultsScalarFieldEnum[]
  }

  /**
   * TestCase without action
   */
  export type TestCaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCase
     */
    select?: TestCaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseInclude<ExtArgs> | null
  }


  /**
   * Model ExperimentTestCases
   */

  export type AggregateExperimentTestCases = {
    _count: ExperimentTestCasesCountAggregateOutputType | null
    _min: ExperimentTestCasesMinAggregateOutputType | null
    _max: ExperimentTestCasesMaxAggregateOutputType | null
  }

  export type ExperimentTestCasesMinAggregateOutputType = {
    id: string | null
    experimentId: string | null
    testCaseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExperimentTestCasesMaxAggregateOutputType = {
    id: string | null
    experimentId: string | null
    testCaseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExperimentTestCasesCountAggregateOutputType = {
    id: number
    experimentId: number
    testCaseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExperimentTestCasesMinAggregateInputType = {
    id?: true
    experimentId?: true
    testCaseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExperimentTestCasesMaxAggregateInputType = {
    id?: true
    experimentId?: true
    testCaseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExperimentTestCasesCountAggregateInputType = {
    id?: true
    experimentId?: true
    testCaseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExperimentTestCasesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExperimentTestCases to aggregate.
     */
    where?: ExperimentTestCasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperimentTestCases to fetch.
     */
    orderBy?: ExperimentTestCasesOrderByWithRelationInput | ExperimentTestCasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExperimentTestCasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperimentTestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperimentTestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExperimentTestCases
    **/
    _count?: true | ExperimentTestCasesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExperimentTestCasesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExperimentTestCasesMaxAggregateInputType
  }

  export type GetExperimentTestCasesAggregateType<T extends ExperimentTestCasesAggregateArgs> = {
        [P in keyof T & keyof AggregateExperimentTestCases]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExperimentTestCases[P]>
      : GetScalarType<T[P], AggregateExperimentTestCases[P]>
  }




  export type ExperimentTestCasesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperimentTestCasesWhereInput
    orderBy?: ExperimentTestCasesOrderByWithAggregationInput | ExperimentTestCasesOrderByWithAggregationInput[]
    by: ExperimentTestCasesScalarFieldEnum[] | ExperimentTestCasesScalarFieldEnum
    having?: ExperimentTestCasesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExperimentTestCasesCountAggregateInputType | true
    _min?: ExperimentTestCasesMinAggregateInputType
    _max?: ExperimentTestCasesMaxAggregateInputType
  }

  export type ExperimentTestCasesGroupByOutputType = {
    id: string
    experimentId: string
    testCaseId: string
    createdAt: Date
    updatedAt: Date
    _count: ExperimentTestCasesCountAggregateOutputType | null
    _min: ExperimentTestCasesMinAggregateOutputType | null
    _max: ExperimentTestCasesMaxAggregateOutputType | null
  }

  type GetExperimentTestCasesGroupByPayload<T extends ExperimentTestCasesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExperimentTestCasesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExperimentTestCasesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExperimentTestCasesGroupByOutputType[P]>
            : GetScalarType<T[P], ExperimentTestCasesGroupByOutputType[P]>
        }
      >
    >


  export type ExperimentTestCasesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    experimentId?: boolean
    testCaseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    experiment?: boolean | ExperimentDefaultArgs<ExtArgs>
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experimentTestCases"]>

  export type ExperimentTestCasesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    experimentId?: boolean
    testCaseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    experiment?: boolean | ExperimentDefaultArgs<ExtArgs>
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experimentTestCases"]>

  export type ExperimentTestCasesSelectScalar = {
    id?: boolean
    experimentId?: boolean
    testCaseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExperimentTestCasesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiment?: boolean | ExperimentDefaultArgs<ExtArgs>
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
  }
  export type ExperimentTestCasesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiment?: boolean | ExperimentDefaultArgs<ExtArgs>
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
  }

  export type $ExperimentTestCasesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExperimentTestCases"
    objects: {
      experiment: Prisma.$ExperimentPayload<ExtArgs>
      testCase: Prisma.$TestCasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      experimentId: string
      testCaseId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["experimentTestCases"]>
    composites: {}
  }

  type ExperimentTestCasesGetPayload<S extends boolean | null | undefined | ExperimentTestCasesDefaultArgs> = $Result.GetResult<Prisma.$ExperimentTestCasesPayload, S>

  type ExperimentTestCasesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExperimentTestCasesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExperimentTestCasesCountAggregateInputType | true
    }

  export interface ExperimentTestCasesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExperimentTestCases'], meta: { name: 'ExperimentTestCases' } }
    /**
     * Find zero or one ExperimentTestCases that matches the filter.
     * @param {ExperimentTestCasesFindUniqueArgs} args - Arguments to find a ExperimentTestCases
     * @example
     * // Get one ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExperimentTestCasesFindUniqueArgs>(args: SelectSubset<T, ExperimentTestCasesFindUniqueArgs<ExtArgs>>): Prisma__ExperimentTestCasesClient<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ExperimentTestCases that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExperimentTestCasesFindUniqueOrThrowArgs} args - Arguments to find a ExperimentTestCases
     * @example
     * // Get one ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExperimentTestCasesFindUniqueOrThrowArgs>(args: SelectSubset<T, ExperimentTestCasesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExperimentTestCasesClient<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ExperimentTestCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentTestCasesFindFirstArgs} args - Arguments to find a ExperimentTestCases
     * @example
     * // Get one ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExperimentTestCasesFindFirstArgs>(args?: SelectSubset<T, ExperimentTestCasesFindFirstArgs<ExtArgs>>): Prisma__ExperimentTestCasesClient<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ExperimentTestCases that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentTestCasesFindFirstOrThrowArgs} args - Arguments to find a ExperimentTestCases
     * @example
     * // Get one ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExperimentTestCasesFindFirstOrThrowArgs>(args?: SelectSubset<T, ExperimentTestCasesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExperimentTestCasesClient<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ExperimentTestCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentTestCasesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.findMany()
     * 
     * // Get first 10 ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experimentTestCasesWithIdOnly = await prisma.experimentTestCases.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExperimentTestCasesFindManyArgs>(args?: SelectSubset<T, ExperimentTestCasesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ExperimentTestCases.
     * @param {ExperimentTestCasesCreateArgs} args - Arguments to create a ExperimentTestCases.
     * @example
     * // Create one ExperimentTestCases
     * const ExperimentTestCases = await prisma.experimentTestCases.create({
     *   data: {
     *     // ... data to create a ExperimentTestCases
     *   }
     * })
     * 
     */
    create<T extends ExperimentTestCasesCreateArgs>(args: SelectSubset<T, ExperimentTestCasesCreateArgs<ExtArgs>>): Prisma__ExperimentTestCasesClient<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ExperimentTestCases.
     * @param {ExperimentTestCasesCreateManyArgs} args - Arguments to create many ExperimentTestCases.
     * @example
     * // Create many ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExperimentTestCasesCreateManyArgs>(args?: SelectSubset<T, ExperimentTestCasesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExperimentTestCases and returns the data saved in the database.
     * @param {ExperimentTestCasesCreateManyAndReturnArgs} args - Arguments to create many ExperimentTestCases.
     * @example
     * // Create many ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExperimentTestCases and only return the `id`
     * const experimentTestCasesWithIdOnly = await prisma.experimentTestCases.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExperimentTestCasesCreateManyAndReturnArgs>(args?: SelectSubset<T, ExperimentTestCasesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ExperimentTestCases.
     * @param {ExperimentTestCasesDeleteArgs} args - Arguments to delete one ExperimentTestCases.
     * @example
     * // Delete one ExperimentTestCases
     * const ExperimentTestCases = await prisma.experimentTestCases.delete({
     *   where: {
     *     // ... filter to delete one ExperimentTestCases
     *   }
     * })
     * 
     */
    delete<T extends ExperimentTestCasesDeleteArgs>(args: SelectSubset<T, ExperimentTestCasesDeleteArgs<ExtArgs>>): Prisma__ExperimentTestCasesClient<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ExperimentTestCases.
     * @param {ExperimentTestCasesUpdateArgs} args - Arguments to update one ExperimentTestCases.
     * @example
     * // Update one ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExperimentTestCasesUpdateArgs>(args: SelectSubset<T, ExperimentTestCasesUpdateArgs<ExtArgs>>): Prisma__ExperimentTestCasesClient<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ExperimentTestCases.
     * @param {ExperimentTestCasesDeleteManyArgs} args - Arguments to filter ExperimentTestCases to delete.
     * @example
     * // Delete a few ExperimentTestCases
     * const { count } = await prisma.experimentTestCases.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExperimentTestCasesDeleteManyArgs>(args?: SelectSubset<T, ExperimentTestCasesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExperimentTestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentTestCasesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExperimentTestCasesUpdateManyArgs>(args: SelectSubset<T, ExperimentTestCasesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExperimentTestCases.
     * @param {ExperimentTestCasesUpsertArgs} args - Arguments to update or create a ExperimentTestCases.
     * @example
     * // Update or create a ExperimentTestCases
     * const experimentTestCases = await prisma.experimentTestCases.upsert({
     *   create: {
     *     // ... data to create a ExperimentTestCases
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExperimentTestCases we want to update
     *   }
     * })
     */
    upsert<T extends ExperimentTestCasesUpsertArgs>(args: SelectSubset<T, ExperimentTestCasesUpsertArgs<ExtArgs>>): Prisma__ExperimentTestCasesClient<$Result.GetResult<Prisma.$ExperimentTestCasesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ExperimentTestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentTestCasesCountArgs} args - Arguments to filter ExperimentTestCases to count.
     * @example
     * // Count the number of ExperimentTestCases
     * const count = await prisma.experimentTestCases.count({
     *   where: {
     *     // ... the filter for the ExperimentTestCases we want to count
     *   }
     * })
    **/
    count<T extends ExperimentTestCasesCountArgs>(
      args?: Subset<T, ExperimentTestCasesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExperimentTestCasesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExperimentTestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentTestCasesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExperimentTestCasesAggregateArgs>(args: Subset<T, ExperimentTestCasesAggregateArgs>): Prisma.PrismaPromise<GetExperimentTestCasesAggregateType<T>>

    /**
     * Group by ExperimentTestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentTestCasesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExperimentTestCasesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExperimentTestCasesGroupByArgs['orderBy'] }
        : { orderBy?: ExperimentTestCasesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExperimentTestCasesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperimentTestCasesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExperimentTestCases model
   */
  readonly fields: ExperimentTestCasesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExperimentTestCases.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExperimentTestCasesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    experiment<T extends ExperimentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExperimentDefaultArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    testCase<T extends TestCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestCaseDefaultArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExperimentTestCases model
   */ 
  interface ExperimentTestCasesFieldRefs {
    readonly id: FieldRef<"ExperimentTestCases", 'String'>
    readonly experimentId: FieldRef<"ExperimentTestCases", 'String'>
    readonly testCaseId: FieldRef<"ExperimentTestCases", 'String'>
    readonly createdAt: FieldRef<"ExperimentTestCases", 'DateTime'>
    readonly updatedAt: FieldRef<"ExperimentTestCases", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExperimentTestCases findUnique
   */
  export type ExperimentTestCasesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentTestCases to fetch.
     */
    where: ExperimentTestCasesWhereUniqueInput
  }

  /**
   * ExperimentTestCases findUniqueOrThrow
   */
  export type ExperimentTestCasesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentTestCases to fetch.
     */
    where: ExperimentTestCasesWhereUniqueInput
  }

  /**
   * ExperimentTestCases findFirst
   */
  export type ExperimentTestCasesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentTestCases to fetch.
     */
    where?: ExperimentTestCasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperimentTestCases to fetch.
     */
    orderBy?: ExperimentTestCasesOrderByWithRelationInput | ExperimentTestCasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExperimentTestCases.
     */
    cursor?: ExperimentTestCasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperimentTestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperimentTestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExperimentTestCases.
     */
    distinct?: ExperimentTestCasesScalarFieldEnum | ExperimentTestCasesScalarFieldEnum[]
  }

  /**
   * ExperimentTestCases findFirstOrThrow
   */
  export type ExperimentTestCasesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentTestCases to fetch.
     */
    where?: ExperimentTestCasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperimentTestCases to fetch.
     */
    orderBy?: ExperimentTestCasesOrderByWithRelationInput | ExperimentTestCasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExperimentTestCases.
     */
    cursor?: ExperimentTestCasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperimentTestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperimentTestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExperimentTestCases.
     */
    distinct?: ExperimentTestCasesScalarFieldEnum | ExperimentTestCasesScalarFieldEnum[]
  }

  /**
   * ExperimentTestCases findMany
   */
  export type ExperimentTestCasesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentTestCases to fetch.
     */
    where?: ExperimentTestCasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperimentTestCases to fetch.
     */
    orderBy?: ExperimentTestCasesOrderByWithRelationInput | ExperimentTestCasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExperimentTestCases.
     */
    cursor?: ExperimentTestCasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperimentTestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperimentTestCases.
     */
    skip?: number
    distinct?: ExperimentTestCasesScalarFieldEnum | ExperimentTestCasesScalarFieldEnum[]
  }

  /**
   * ExperimentTestCases create
   */
  export type ExperimentTestCasesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    /**
     * The data needed to create a ExperimentTestCases.
     */
    data: XOR<ExperimentTestCasesCreateInput, ExperimentTestCasesUncheckedCreateInput>
  }

  /**
   * ExperimentTestCases createMany
   */
  export type ExperimentTestCasesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExperimentTestCases.
     */
    data: ExperimentTestCasesCreateManyInput | ExperimentTestCasesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExperimentTestCases createManyAndReturn
   */
  export type ExperimentTestCasesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ExperimentTestCases.
     */
    data: ExperimentTestCasesCreateManyInput | ExperimentTestCasesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExperimentTestCases update
   */
  export type ExperimentTestCasesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    /**
     * The data needed to update a ExperimentTestCases.
     */
    data: XOR<ExperimentTestCasesUpdateInput, ExperimentTestCasesUncheckedUpdateInput>
    /**
     * Choose, which ExperimentTestCases to update.
     */
    where: ExperimentTestCasesWhereUniqueInput
  }

  /**
   * ExperimentTestCases updateMany
   */
  export type ExperimentTestCasesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExperimentTestCases.
     */
    data: XOR<ExperimentTestCasesUpdateManyMutationInput, ExperimentTestCasesUncheckedUpdateManyInput>
    /**
     * Filter which ExperimentTestCases to update
     */
    where?: ExperimentTestCasesWhereInput
  }

  /**
   * ExperimentTestCases upsert
   */
  export type ExperimentTestCasesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    /**
     * The filter to search for the ExperimentTestCases to update in case it exists.
     */
    where: ExperimentTestCasesWhereUniqueInput
    /**
     * In case the ExperimentTestCases found by the `where` argument doesn't exist, create a new ExperimentTestCases with this data.
     */
    create: XOR<ExperimentTestCasesCreateInput, ExperimentTestCasesUncheckedCreateInput>
    /**
     * In case the ExperimentTestCases was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExperimentTestCasesUpdateInput, ExperimentTestCasesUncheckedUpdateInput>
  }

  /**
   * ExperimentTestCases delete
   */
  export type ExperimentTestCasesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
    /**
     * Filter which ExperimentTestCases to delete.
     */
    where: ExperimentTestCasesWhereUniqueInput
  }

  /**
   * ExperimentTestCases deleteMany
   */
  export type ExperimentTestCasesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExperimentTestCases to delete
     */
    where?: ExperimentTestCasesWhereInput
  }

  /**
   * ExperimentTestCases without action
   */
  export type ExperimentTestCasesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentTestCases
     */
    select?: ExperimentTestCasesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentTestCasesInclude<ExtArgs> | null
  }


  /**
   * Model TestCaseGraders
   */

  export type AggregateTestCaseGraders = {
    _count: TestCaseGradersCountAggregateOutputType | null
    _min: TestCaseGradersMinAggregateOutputType | null
    _max: TestCaseGradersMaxAggregateOutputType | null
  }

  export type TestCaseGradersMinAggregateOutputType = {
    id: string | null
    testCaseId: string | null
    graderType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCaseGradersMaxAggregateOutputType = {
    id: string | null
    testCaseId: string | null
    graderType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCaseGradersCountAggregateOutputType = {
    id: number
    testCaseId: number
    graderType: number
    graderConfig: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TestCaseGradersMinAggregateInputType = {
    id?: true
    testCaseId?: true
    graderType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCaseGradersMaxAggregateInputType = {
    id?: true
    testCaseId?: true
    graderType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCaseGradersCountAggregateInputType = {
    id?: true
    testCaseId?: true
    graderType?: true
    graderConfig?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TestCaseGradersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCaseGraders to aggregate.
     */
    where?: TestCaseGradersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseGraders to fetch.
     */
    orderBy?: TestCaseGradersOrderByWithRelationInput | TestCaseGradersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestCaseGradersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseGraders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseGraders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestCaseGraders
    **/
    _count?: true | TestCaseGradersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestCaseGradersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestCaseGradersMaxAggregateInputType
  }

  export type GetTestCaseGradersAggregateType<T extends TestCaseGradersAggregateArgs> = {
        [P in keyof T & keyof AggregateTestCaseGraders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestCaseGraders[P]>
      : GetScalarType<T[P], AggregateTestCaseGraders[P]>
  }




  export type TestCaseGradersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseGradersWhereInput
    orderBy?: TestCaseGradersOrderByWithAggregationInput | TestCaseGradersOrderByWithAggregationInput[]
    by: TestCaseGradersScalarFieldEnum[] | TestCaseGradersScalarFieldEnum
    having?: TestCaseGradersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCaseGradersCountAggregateInputType | true
    _min?: TestCaseGradersMinAggregateInputType
    _max?: TestCaseGradersMaxAggregateInputType
  }

  export type TestCaseGradersGroupByOutputType = {
    id: string
    testCaseId: string
    graderType: string
    graderConfig: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: TestCaseGradersCountAggregateOutputType | null
    _min: TestCaseGradersMinAggregateOutputType | null
    _max: TestCaseGradersMaxAggregateOutputType | null
  }

  type GetTestCaseGradersGroupByPayload<T extends TestCaseGradersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestCaseGradersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestCaseGradersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestCaseGradersGroupByOutputType[P]>
            : GetScalarType<T[P], TestCaseGradersGroupByOutputType[P]>
        }
      >
    >


  export type TestCaseGradersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    testCaseId?: boolean
    graderType?: boolean
    graderConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCaseGraders"]>

  export type TestCaseGradersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    testCaseId?: boolean
    graderType?: boolean
    graderConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCaseGraders"]>

  export type TestCaseGradersSelectScalar = {
    id?: boolean
    testCaseId?: boolean
    graderType?: boolean
    graderConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TestCaseGradersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
  }
  export type TestCaseGradersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
  }

  export type $TestCaseGradersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestCaseGraders"
    objects: {
      testCase: Prisma.$TestCasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      testCaseId: string
      graderType: string
      graderConfig: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["testCaseGraders"]>
    composites: {}
  }

  type TestCaseGradersGetPayload<S extends boolean | null | undefined | TestCaseGradersDefaultArgs> = $Result.GetResult<Prisma.$TestCaseGradersPayload, S>

  type TestCaseGradersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TestCaseGradersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TestCaseGradersCountAggregateInputType | true
    }

  export interface TestCaseGradersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestCaseGraders'], meta: { name: 'TestCaseGraders' } }
    /**
     * Find zero or one TestCaseGraders that matches the filter.
     * @param {TestCaseGradersFindUniqueArgs} args - Arguments to find a TestCaseGraders
     * @example
     * // Get one TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestCaseGradersFindUniqueArgs>(args: SelectSubset<T, TestCaseGradersFindUniqueArgs<ExtArgs>>): Prisma__TestCaseGradersClient<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TestCaseGraders that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TestCaseGradersFindUniqueOrThrowArgs} args - Arguments to find a TestCaseGraders
     * @example
     * // Get one TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestCaseGradersFindUniqueOrThrowArgs>(args: SelectSubset<T, TestCaseGradersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestCaseGradersClient<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TestCaseGraders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseGradersFindFirstArgs} args - Arguments to find a TestCaseGraders
     * @example
     * // Get one TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestCaseGradersFindFirstArgs>(args?: SelectSubset<T, TestCaseGradersFindFirstArgs<ExtArgs>>): Prisma__TestCaseGradersClient<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TestCaseGraders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseGradersFindFirstOrThrowArgs} args - Arguments to find a TestCaseGraders
     * @example
     * // Get one TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestCaseGradersFindFirstOrThrowArgs>(args?: SelectSubset<T, TestCaseGradersFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestCaseGradersClient<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TestCaseGraders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseGradersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.findMany()
     * 
     * // Get first 10 TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testCaseGradersWithIdOnly = await prisma.testCaseGraders.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestCaseGradersFindManyArgs>(args?: SelectSubset<T, TestCaseGradersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TestCaseGraders.
     * @param {TestCaseGradersCreateArgs} args - Arguments to create a TestCaseGraders.
     * @example
     * // Create one TestCaseGraders
     * const TestCaseGraders = await prisma.testCaseGraders.create({
     *   data: {
     *     // ... data to create a TestCaseGraders
     *   }
     * })
     * 
     */
    create<T extends TestCaseGradersCreateArgs>(args: SelectSubset<T, TestCaseGradersCreateArgs<ExtArgs>>): Prisma__TestCaseGradersClient<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TestCaseGraders.
     * @param {TestCaseGradersCreateManyArgs} args - Arguments to create many TestCaseGraders.
     * @example
     * // Create many TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestCaseGradersCreateManyArgs>(args?: SelectSubset<T, TestCaseGradersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TestCaseGraders and returns the data saved in the database.
     * @param {TestCaseGradersCreateManyAndReturnArgs} args - Arguments to create many TestCaseGraders.
     * @example
     * // Create many TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TestCaseGraders and only return the `id`
     * const testCaseGradersWithIdOnly = await prisma.testCaseGraders.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestCaseGradersCreateManyAndReturnArgs>(args?: SelectSubset<T, TestCaseGradersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TestCaseGraders.
     * @param {TestCaseGradersDeleteArgs} args - Arguments to delete one TestCaseGraders.
     * @example
     * // Delete one TestCaseGraders
     * const TestCaseGraders = await prisma.testCaseGraders.delete({
     *   where: {
     *     // ... filter to delete one TestCaseGraders
     *   }
     * })
     * 
     */
    delete<T extends TestCaseGradersDeleteArgs>(args: SelectSubset<T, TestCaseGradersDeleteArgs<ExtArgs>>): Prisma__TestCaseGradersClient<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TestCaseGraders.
     * @param {TestCaseGradersUpdateArgs} args - Arguments to update one TestCaseGraders.
     * @example
     * // Update one TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestCaseGradersUpdateArgs>(args: SelectSubset<T, TestCaseGradersUpdateArgs<ExtArgs>>): Prisma__TestCaseGradersClient<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TestCaseGraders.
     * @param {TestCaseGradersDeleteManyArgs} args - Arguments to filter TestCaseGraders to delete.
     * @example
     * // Delete a few TestCaseGraders
     * const { count } = await prisma.testCaseGraders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestCaseGradersDeleteManyArgs>(args?: SelectSubset<T, TestCaseGradersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestCaseGraders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseGradersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestCaseGradersUpdateManyArgs>(args: SelectSubset<T, TestCaseGradersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestCaseGraders.
     * @param {TestCaseGradersUpsertArgs} args - Arguments to update or create a TestCaseGraders.
     * @example
     * // Update or create a TestCaseGraders
     * const testCaseGraders = await prisma.testCaseGraders.upsert({
     *   create: {
     *     // ... data to create a TestCaseGraders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestCaseGraders we want to update
     *   }
     * })
     */
    upsert<T extends TestCaseGradersUpsertArgs>(args: SelectSubset<T, TestCaseGradersUpsertArgs<ExtArgs>>): Prisma__TestCaseGradersClient<$Result.GetResult<Prisma.$TestCaseGradersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TestCaseGraders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseGradersCountArgs} args - Arguments to filter TestCaseGraders to count.
     * @example
     * // Count the number of TestCaseGraders
     * const count = await prisma.testCaseGraders.count({
     *   where: {
     *     // ... the filter for the TestCaseGraders we want to count
     *   }
     * })
    **/
    count<T extends TestCaseGradersCountArgs>(
      args?: Subset<T, TestCaseGradersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCaseGradersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestCaseGraders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseGradersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestCaseGradersAggregateArgs>(args: Subset<T, TestCaseGradersAggregateArgs>): Prisma.PrismaPromise<GetTestCaseGradersAggregateType<T>>

    /**
     * Group by TestCaseGraders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseGradersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestCaseGradersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestCaseGradersGroupByArgs['orderBy'] }
        : { orderBy?: TestCaseGradersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestCaseGradersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestCaseGradersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestCaseGraders model
   */
  readonly fields: TestCaseGradersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestCaseGraders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestCaseGradersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    testCase<T extends TestCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestCaseDefaultArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestCaseGraders model
   */ 
  interface TestCaseGradersFieldRefs {
    readonly id: FieldRef<"TestCaseGraders", 'String'>
    readonly testCaseId: FieldRef<"TestCaseGraders", 'String'>
    readonly graderType: FieldRef<"TestCaseGraders", 'String'>
    readonly graderConfig: FieldRef<"TestCaseGraders", 'Json'>
    readonly createdAt: FieldRef<"TestCaseGraders", 'DateTime'>
    readonly updatedAt: FieldRef<"TestCaseGraders", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TestCaseGraders findUnique
   */
  export type TestCaseGradersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseGraders to fetch.
     */
    where: TestCaseGradersWhereUniqueInput
  }

  /**
   * TestCaseGraders findUniqueOrThrow
   */
  export type TestCaseGradersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseGraders to fetch.
     */
    where: TestCaseGradersWhereUniqueInput
  }

  /**
   * TestCaseGraders findFirst
   */
  export type TestCaseGradersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseGraders to fetch.
     */
    where?: TestCaseGradersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseGraders to fetch.
     */
    orderBy?: TestCaseGradersOrderByWithRelationInput | TestCaseGradersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCaseGraders.
     */
    cursor?: TestCaseGradersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseGraders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseGraders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCaseGraders.
     */
    distinct?: TestCaseGradersScalarFieldEnum | TestCaseGradersScalarFieldEnum[]
  }

  /**
   * TestCaseGraders findFirstOrThrow
   */
  export type TestCaseGradersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseGraders to fetch.
     */
    where?: TestCaseGradersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseGraders to fetch.
     */
    orderBy?: TestCaseGradersOrderByWithRelationInput | TestCaseGradersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCaseGraders.
     */
    cursor?: TestCaseGradersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseGraders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseGraders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCaseGraders.
     */
    distinct?: TestCaseGradersScalarFieldEnum | TestCaseGradersScalarFieldEnum[]
  }

  /**
   * TestCaseGraders findMany
   */
  export type TestCaseGradersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseGraders to fetch.
     */
    where?: TestCaseGradersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseGraders to fetch.
     */
    orderBy?: TestCaseGradersOrderByWithRelationInput | TestCaseGradersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestCaseGraders.
     */
    cursor?: TestCaseGradersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseGraders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseGraders.
     */
    skip?: number
    distinct?: TestCaseGradersScalarFieldEnum | TestCaseGradersScalarFieldEnum[]
  }

  /**
   * TestCaseGraders create
   */
  export type TestCaseGradersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    /**
     * The data needed to create a TestCaseGraders.
     */
    data: XOR<TestCaseGradersCreateInput, TestCaseGradersUncheckedCreateInput>
  }

  /**
   * TestCaseGraders createMany
   */
  export type TestCaseGradersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestCaseGraders.
     */
    data: TestCaseGradersCreateManyInput | TestCaseGradersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestCaseGraders createManyAndReturn
   */
  export type TestCaseGradersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TestCaseGraders.
     */
    data: TestCaseGradersCreateManyInput | TestCaseGradersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TestCaseGraders update
   */
  export type TestCaseGradersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    /**
     * The data needed to update a TestCaseGraders.
     */
    data: XOR<TestCaseGradersUpdateInput, TestCaseGradersUncheckedUpdateInput>
    /**
     * Choose, which TestCaseGraders to update.
     */
    where: TestCaseGradersWhereUniqueInput
  }

  /**
   * TestCaseGraders updateMany
   */
  export type TestCaseGradersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestCaseGraders.
     */
    data: XOR<TestCaseGradersUpdateManyMutationInput, TestCaseGradersUncheckedUpdateManyInput>
    /**
     * Filter which TestCaseGraders to update
     */
    where?: TestCaseGradersWhereInput
  }

  /**
   * TestCaseGraders upsert
   */
  export type TestCaseGradersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    /**
     * The filter to search for the TestCaseGraders to update in case it exists.
     */
    where: TestCaseGradersWhereUniqueInput
    /**
     * In case the TestCaseGraders found by the `where` argument doesn't exist, create a new TestCaseGraders with this data.
     */
    create: XOR<TestCaseGradersCreateInput, TestCaseGradersUncheckedCreateInput>
    /**
     * In case the TestCaseGraders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestCaseGradersUpdateInput, TestCaseGradersUncheckedUpdateInput>
  }

  /**
   * TestCaseGraders delete
   */
  export type TestCaseGradersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
    /**
     * Filter which TestCaseGraders to delete.
     */
    where: TestCaseGradersWhereUniqueInput
  }

  /**
   * TestCaseGraders deleteMany
   */
  export type TestCaseGradersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCaseGraders to delete
     */
    where?: TestCaseGradersWhereInput
  }

  /**
   * TestCaseGraders without action
   */
  export type TestCaseGradersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseGraders
     */
    select?: TestCaseGradersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseGradersInclude<ExtArgs> | null
  }


  /**
   * Model TestCaseResults
   */

  export type AggregateTestCaseResults = {
    _count: TestCaseResultsCountAggregateOutputType | null
    _avg: TestCaseResultsAvgAggregateOutputType | null
    _sum: TestCaseResultsSumAggregateOutputType | null
    _min: TestCaseResultsMinAggregateOutputType | null
    _max: TestCaseResultsMaxAggregateOutputType | null
  }

  export type TestCaseResultsAvgAggregateOutputType = {
    responseTimeMs: number | null
    score: number | null
  }

  export type TestCaseResultsSumAggregateOutputType = {
    responseTimeMs: number | null
    score: number | null
  }

  export type TestCaseResultsMinAggregateOutputType = {
    id: string | null
    experimentId: string | null
    testCaseId: string | null
    modelId: string | null
    responseText: string | null
    responseTimeMs: number | null
    graderType: string | null
    score: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCaseResultsMaxAggregateOutputType = {
    id: string | null
    experimentId: string | null
    testCaseId: string | null
    modelId: string | null
    responseText: string | null
    responseTimeMs: number | null
    graderType: string | null
    score: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCaseResultsCountAggregateOutputType = {
    id: number
    experimentId: number
    testCaseId: number
    modelId: number
    responseText: number
    responseTimeMs: number
    graderType: number
    score: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TestCaseResultsAvgAggregateInputType = {
    responseTimeMs?: true
    score?: true
  }

  export type TestCaseResultsSumAggregateInputType = {
    responseTimeMs?: true
    score?: true
  }

  export type TestCaseResultsMinAggregateInputType = {
    id?: true
    experimentId?: true
    testCaseId?: true
    modelId?: true
    responseText?: true
    responseTimeMs?: true
    graderType?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCaseResultsMaxAggregateInputType = {
    id?: true
    experimentId?: true
    testCaseId?: true
    modelId?: true
    responseText?: true
    responseTimeMs?: true
    graderType?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCaseResultsCountAggregateInputType = {
    id?: true
    experimentId?: true
    testCaseId?: true
    modelId?: true
    responseText?: true
    responseTimeMs?: true
    graderType?: true
    score?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TestCaseResultsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCaseResults to aggregate.
     */
    where?: TestCaseResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseResults to fetch.
     */
    orderBy?: TestCaseResultsOrderByWithRelationInput | TestCaseResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestCaseResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestCaseResults
    **/
    _count?: true | TestCaseResultsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestCaseResultsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestCaseResultsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestCaseResultsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestCaseResultsMaxAggregateInputType
  }

  export type GetTestCaseResultsAggregateType<T extends TestCaseResultsAggregateArgs> = {
        [P in keyof T & keyof AggregateTestCaseResults]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestCaseResults[P]>
      : GetScalarType<T[P], AggregateTestCaseResults[P]>
  }




  export type TestCaseResultsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseResultsWhereInput
    orderBy?: TestCaseResultsOrderByWithAggregationInput | TestCaseResultsOrderByWithAggregationInput[]
    by: TestCaseResultsScalarFieldEnum[] | TestCaseResultsScalarFieldEnum
    having?: TestCaseResultsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCaseResultsCountAggregateInputType | true
    _avg?: TestCaseResultsAvgAggregateInputType
    _sum?: TestCaseResultsSumAggregateInputType
    _min?: TestCaseResultsMinAggregateInputType
    _max?: TestCaseResultsMaxAggregateInputType
  }

  export type TestCaseResultsGroupByOutputType = {
    id: string
    experimentId: string
    testCaseId: string
    modelId: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score: number | null
    createdAt: Date
    updatedAt: Date
    _count: TestCaseResultsCountAggregateOutputType | null
    _avg: TestCaseResultsAvgAggregateOutputType | null
    _sum: TestCaseResultsSumAggregateOutputType | null
    _min: TestCaseResultsMinAggregateOutputType | null
    _max: TestCaseResultsMaxAggregateOutputType | null
  }

  type GetTestCaseResultsGroupByPayload<T extends TestCaseResultsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestCaseResultsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestCaseResultsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestCaseResultsGroupByOutputType[P]>
            : GetScalarType<T[P], TestCaseResultsGroupByOutputType[P]>
        }
      >
    >


  export type TestCaseResultsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    experimentId?: boolean
    testCaseId?: boolean
    modelId?: boolean
    responseText?: boolean
    responseTimeMs?: boolean
    graderType?: boolean
    score?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    experiment?: boolean | ExperimentDefaultArgs<ExtArgs>
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
    model?: boolean | ModelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCaseResults"]>

  export type TestCaseResultsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    experimentId?: boolean
    testCaseId?: boolean
    modelId?: boolean
    responseText?: boolean
    responseTimeMs?: boolean
    graderType?: boolean
    score?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    experiment?: boolean | ExperimentDefaultArgs<ExtArgs>
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
    model?: boolean | ModelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCaseResults"]>

  export type TestCaseResultsSelectScalar = {
    id?: boolean
    experimentId?: boolean
    testCaseId?: boolean
    modelId?: boolean
    responseText?: boolean
    responseTimeMs?: boolean
    graderType?: boolean
    score?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TestCaseResultsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiment?: boolean | ExperimentDefaultArgs<ExtArgs>
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
    model?: boolean | ModelDefaultArgs<ExtArgs>
  }
  export type TestCaseResultsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiment?: boolean | ExperimentDefaultArgs<ExtArgs>
    testCase?: boolean | TestCaseDefaultArgs<ExtArgs>
    model?: boolean | ModelDefaultArgs<ExtArgs>
  }

  export type $TestCaseResultsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestCaseResults"
    objects: {
      experiment: Prisma.$ExperimentPayload<ExtArgs>
      testCase: Prisma.$TestCasePayload<ExtArgs>
      model: Prisma.$ModelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      experimentId: string
      testCaseId: string
      modelId: string
      responseText: string
      responseTimeMs: number
      graderType: string
      score: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["testCaseResults"]>
    composites: {}
  }

  type TestCaseResultsGetPayload<S extends boolean | null | undefined | TestCaseResultsDefaultArgs> = $Result.GetResult<Prisma.$TestCaseResultsPayload, S>

  type TestCaseResultsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TestCaseResultsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TestCaseResultsCountAggregateInputType | true
    }

  export interface TestCaseResultsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestCaseResults'], meta: { name: 'TestCaseResults' } }
    /**
     * Find zero or one TestCaseResults that matches the filter.
     * @param {TestCaseResultsFindUniqueArgs} args - Arguments to find a TestCaseResults
     * @example
     * // Get one TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestCaseResultsFindUniqueArgs>(args: SelectSubset<T, TestCaseResultsFindUniqueArgs<ExtArgs>>): Prisma__TestCaseResultsClient<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TestCaseResults that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TestCaseResultsFindUniqueOrThrowArgs} args - Arguments to find a TestCaseResults
     * @example
     * // Get one TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestCaseResultsFindUniqueOrThrowArgs>(args: SelectSubset<T, TestCaseResultsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestCaseResultsClient<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TestCaseResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultsFindFirstArgs} args - Arguments to find a TestCaseResults
     * @example
     * // Get one TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestCaseResultsFindFirstArgs>(args?: SelectSubset<T, TestCaseResultsFindFirstArgs<ExtArgs>>): Prisma__TestCaseResultsClient<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TestCaseResults that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultsFindFirstOrThrowArgs} args - Arguments to find a TestCaseResults
     * @example
     * // Get one TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestCaseResultsFindFirstOrThrowArgs>(args?: SelectSubset<T, TestCaseResultsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestCaseResultsClient<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TestCaseResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.findMany()
     * 
     * // Get first 10 TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testCaseResultsWithIdOnly = await prisma.testCaseResults.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestCaseResultsFindManyArgs>(args?: SelectSubset<T, TestCaseResultsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TestCaseResults.
     * @param {TestCaseResultsCreateArgs} args - Arguments to create a TestCaseResults.
     * @example
     * // Create one TestCaseResults
     * const TestCaseResults = await prisma.testCaseResults.create({
     *   data: {
     *     // ... data to create a TestCaseResults
     *   }
     * })
     * 
     */
    create<T extends TestCaseResultsCreateArgs>(args: SelectSubset<T, TestCaseResultsCreateArgs<ExtArgs>>): Prisma__TestCaseResultsClient<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TestCaseResults.
     * @param {TestCaseResultsCreateManyArgs} args - Arguments to create many TestCaseResults.
     * @example
     * // Create many TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestCaseResultsCreateManyArgs>(args?: SelectSubset<T, TestCaseResultsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TestCaseResults and returns the data saved in the database.
     * @param {TestCaseResultsCreateManyAndReturnArgs} args - Arguments to create many TestCaseResults.
     * @example
     * // Create many TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TestCaseResults and only return the `id`
     * const testCaseResultsWithIdOnly = await prisma.testCaseResults.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestCaseResultsCreateManyAndReturnArgs>(args?: SelectSubset<T, TestCaseResultsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TestCaseResults.
     * @param {TestCaseResultsDeleteArgs} args - Arguments to delete one TestCaseResults.
     * @example
     * // Delete one TestCaseResults
     * const TestCaseResults = await prisma.testCaseResults.delete({
     *   where: {
     *     // ... filter to delete one TestCaseResults
     *   }
     * })
     * 
     */
    delete<T extends TestCaseResultsDeleteArgs>(args: SelectSubset<T, TestCaseResultsDeleteArgs<ExtArgs>>): Prisma__TestCaseResultsClient<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TestCaseResults.
     * @param {TestCaseResultsUpdateArgs} args - Arguments to update one TestCaseResults.
     * @example
     * // Update one TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestCaseResultsUpdateArgs>(args: SelectSubset<T, TestCaseResultsUpdateArgs<ExtArgs>>): Prisma__TestCaseResultsClient<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TestCaseResults.
     * @param {TestCaseResultsDeleteManyArgs} args - Arguments to filter TestCaseResults to delete.
     * @example
     * // Delete a few TestCaseResults
     * const { count } = await prisma.testCaseResults.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestCaseResultsDeleteManyArgs>(args?: SelectSubset<T, TestCaseResultsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestCaseResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestCaseResultsUpdateManyArgs>(args: SelectSubset<T, TestCaseResultsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestCaseResults.
     * @param {TestCaseResultsUpsertArgs} args - Arguments to update or create a TestCaseResults.
     * @example
     * // Update or create a TestCaseResults
     * const testCaseResults = await prisma.testCaseResults.upsert({
     *   create: {
     *     // ... data to create a TestCaseResults
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestCaseResults we want to update
     *   }
     * })
     */
    upsert<T extends TestCaseResultsUpsertArgs>(args: SelectSubset<T, TestCaseResultsUpsertArgs<ExtArgs>>): Prisma__TestCaseResultsClient<$Result.GetResult<Prisma.$TestCaseResultsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TestCaseResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultsCountArgs} args - Arguments to filter TestCaseResults to count.
     * @example
     * // Count the number of TestCaseResults
     * const count = await prisma.testCaseResults.count({
     *   where: {
     *     // ... the filter for the TestCaseResults we want to count
     *   }
     * })
    **/
    count<T extends TestCaseResultsCountArgs>(
      args?: Subset<T, TestCaseResultsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCaseResultsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestCaseResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestCaseResultsAggregateArgs>(args: Subset<T, TestCaseResultsAggregateArgs>): Prisma.PrismaPromise<GetTestCaseResultsAggregateType<T>>

    /**
     * Group by TestCaseResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestCaseResultsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestCaseResultsGroupByArgs['orderBy'] }
        : { orderBy?: TestCaseResultsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestCaseResultsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestCaseResultsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestCaseResults model
   */
  readonly fields: TestCaseResultsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestCaseResults.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestCaseResultsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    experiment<T extends ExperimentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExperimentDefaultArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    testCase<T extends TestCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestCaseDefaultArgs<ExtArgs>>): Prisma__TestCaseClient<$Result.GetResult<Prisma.$TestCasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    model<T extends ModelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ModelDefaultArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestCaseResults model
   */ 
  interface TestCaseResultsFieldRefs {
    readonly id: FieldRef<"TestCaseResults", 'String'>
    readonly experimentId: FieldRef<"TestCaseResults", 'String'>
    readonly testCaseId: FieldRef<"TestCaseResults", 'String'>
    readonly modelId: FieldRef<"TestCaseResults", 'String'>
    readonly responseText: FieldRef<"TestCaseResults", 'String'>
    readonly responseTimeMs: FieldRef<"TestCaseResults", 'Int'>
    readonly graderType: FieldRef<"TestCaseResults", 'String'>
    readonly score: FieldRef<"TestCaseResults", 'Float'>
    readonly createdAt: FieldRef<"TestCaseResults", 'DateTime'>
    readonly updatedAt: FieldRef<"TestCaseResults", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TestCaseResults findUnique
   */
  export type TestCaseResultsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResults to fetch.
     */
    where: TestCaseResultsWhereUniqueInput
  }

  /**
   * TestCaseResults findUniqueOrThrow
   */
  export type TestCaseResultsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResults to fetch.
     */
    where: TestCaseResultsWhereUniqueInput
  }

  /**
   * TestCaseResults findFirst
   */
  export type TestCaseResultsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResults to fetch.
     */
    where?: TestCaseResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseResults to fetch.
     */
    orderBy?: TestCaseResultsOrderByWithRelationInput | TestCaseResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCaseResults.
     */
    cursor?: TestCaseResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCaseResults.
     */
    distinct?: TestCaseResultsScalarFieldEnum | TestCaseResultsScalarFieldEnum[]
  }

  /**
   * TestCaseResults findFirstOrThrow
   */
  export type TestCaseResultsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResults to fetch.
     */
    where?: TestCaseResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseResults to fetch.
     */
    orderBy?: TestCaseResultsOrderByWithRelationInput | TestCaseResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCaseResults.
     */
    cursor?: TestCaseResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCaseResults.
     */
    distinct?: TestCaseResultsScalarFieldEnum | TestCaseResultsScalarFieldEnum[]
  }

  /**
   * TestCaseResults findMany
   */
  export type TestCaseResultsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResults to fetch.
     */
    where?: TestCaseResultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseResults to fetch.
     */
    orderBy?: TestCaseResultsOrderByWithRelationInput | TestCaseResultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestCaseResults.
     */
    cursor?: TestCaseResultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseResults.
     */
    skip?: number
    distinct?: TestCaseResultsScalarFieldEnum | TestCaseResultsScalarFieldEnum[]
  }

  /**
   * TestCaseResults create
   */
  export type TestCaseResultsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    /**
     * The data needed to create a TestCaseResults.
     */
    data: XOR<TestCaseResultsCreateInput, TestCaseResultsUncheckedCreateInput>
  }

  /**
   * TestCaseResults createMany
   */
  export type TestCaseResultsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestCaseResults.
     */
    data: TestCaseResultsCreateManyInput | TestCaseResultsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestCaseResults createManyAndReturn
   */
  export type TestCaseResultsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TestCaseResults.
     */
    data: TestCaseResultsCreateManyInput | TestCaseResultsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TestCaseResults update
   */
  export type TestCaseResultsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    /**
     * The data needed to update a TestCaseResults.
     */
    data: XOR<TestCaseResultsUpdateInput, TestCaseResultsUncheckedUpdateInput>
    /**
     * Choose, which TestCaseResults to update.
     */
    where: TestCaseResultsWhereUniqueInput
  }

  /**
   * TestCaseResults updateMany
   */
  export type TestCaseResultsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestCaseResults.
     */
    data: XOR<TestCaseResultsUpdateManyMutationInput, TestCaseResultsUncheckedUpdateManyInput>
    /**
     * Filter which TestCaseResults to update
     */
    where?: TestCaseResultsWhereInput
  }

  /**
   * TestCaseResults upsert
   */
  export type TestCaseResultsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    /**
     * The filter to search for the TestCaseResults to update in case it exists.
     */
    where: TestCaseResultsWhereUniqueInput
    /**
     * In case the TestCaseResults found by the `where` argument doesn't exist, create a new TestCaseResults with this data.
     */
    create: XOR<TestCaseResultsCreateInput, TestCaseResultsUncheckedCreateInput>
    /**
     * In case the TestCaseResults was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestCaseResultsUpdateInput, TestCaseResultsUncheckedUpdateInput>
  }

  /**
   * TestCaseResults delete
   */
  export type TestCaseResultsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
    /**
     * Filter which TestCaseResults to delete.
     */
    where: TestCaseResultsWhereUniqueInput
  }

  /**
   * TestCaseResults deleteMany
   */
  export type TestCaseResultsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCaseResults to delete
     */
    where?: TestCaseResultsWhereInput
  }

  /**
   * TestCaseResults without action
   */
  export type TestCaseResultsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResults
     */
    select?: TestCaseResultsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ModelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    provider: 'provider',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ModelScalarFieldEnum = (typeof ModelScalarFieldEnum)[keyof typeof ModelScalarFieldEnum]


  export const ExperimentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    systemPrompt: 'systemPrompt',
    modelId: 'modelId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExperimentScalarFieldEnum = (typeof ExperimentScalarFieldEnum)[keyof typeof ExperimentScalarFieldEnum]


  export const TestCaseScalarFieldEnum: {
    id: 'id',
    inputMessage: 'inputMessage',
    expectedOutput: 'expectedOutput',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TestCaseScalarFieldEnum = (typeof TestCaseScalarFieldEnum)[keyof typeof TestCaseScalarFieldEnum]


  export const ExperimentTestCasesScalarFieldEnum: {
    id: 'id',
    experimentId: 'experimentId',
    testCaseId: 'testCaseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExperimentTestCasesScalarFieldEnum = (typeof ExperimentTestCasesScalarFieldEnum)[keyof typeof ExperimentTestCasesScalarFieldEnum]


  export const TestCaseGradersScalarFieldEnum: {
    id: 'id',
    testCaseId: 'testCaseId',
    graderType: 'graderType',
    graderConfig: 'graderConfig',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TestCaseGradersScalarFieldEnum = (typeof TestCaseGradersScalarFieldEnum)[keyof typeof TestCaseGradersScalarFieldEnum]


  export const TestCaseResultsScalarFieldEnum: {
    id: 'id',
    experimentId: 'experimentId',
    testCaseId: 'testCaseId',
    modelId: 'modelId',
    responseText: 'responseText',
    responseTimeMs: 'responseTimeMs',
    graderType: 'graderType',
    score: 'score',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TestCaseResultsScalarFieldEnum = (typeof TestCaseResultsScalarFieldEnum)[keyof typeof TestCaseResultsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ModelWhereInput = {
    AND?: ModelWhereInput | ModelWhereInput[]
    OR?: ModelWhereInput[]
    NOT?: ModelWhereInput | ModelWhereInput[]
    id?: StringFilter<"Model"> | string
    name?: StringFilter<"Model"> | string
    provider?: StringFilter<"Model"> | string
    createdAt?: DateTimeFilter<"Model"> | Date | string
    updatedAt?: DateTimeFilter<"Model"> | Date | string
    Experiment?: ExperimentListRelationFilter
    testCaseResults?: TestCaseResultsListRelationFilter
  }

  export type ModelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Experiment?: ExperimentOrderByRelationAggregateInput
    testCaseResults?: TestCaseResultsOrderByRelationAggregateInput
  }

  export type ModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ModelWhereInput | ModelWhereInput[]
    OR?: ModelWhereInput[]
    NOT?: ModelWhereInput | ModelWhereInput[]
    name?: StringFilter<"Model"> | string
    provider?: StringFilter<"Model"> | string
    createdAt?: DateTimeFilter<"Model"> | Date | string
    updatedAt?: DateTimeFilter<"Model"> | Date | string
    Experiment?: ExperimentListRelationFilter
    testCaseResults?: TestCaseResultsListRelationFilter
  }, "id">

  export type ModelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ModelCountOrderByAggregateInput
    _max?: ModelMaxOrderByAggregateInput
    _min?: ModelMinOrderByAggregateInput
  }

  export type ModelScalarWhereWithAggregatesInput = {
    AND?: ModelScalarWhereWithAggregatesInput | ModelScalarWhereWithAggregatesInput[]
    OR?: ModelScalarWhereWithAggregatesInput[]
    NOT?: ModelScalarWhereWithAggregatesInput | ModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Model"> | string
    name?: StringWithAggregatesFilter<"Model"> | string
    provider?: StringWithAggregatesFilter<"Model"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Model"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Model"> | Date | string
  }

  export type ExperimentWhereInput = {
    AND?: ExperimentWhereInput | ExperimentWhereInput[]
    OR?: ExperimentWhereInput[]
    NOT?: ExperimentWhereInput | ExperimentWhereInput[]
    id?: StringFilter<"Experiment"> | string
    name?: StringFilter<"Experiment"> | string
    description?: StringNullableFilter<"Experiment"> | string | null
    systemPrompt?: StringFilter<"Experiment"> | string
    modelId?: StringFilter<"Experiment"> | string
    createdAt?: DateTimeFilter<"Experiment"> | Date | string
    updatedAt?: DateTimeFilter<"Experiment"> | Date | string
    model?: XOR<ModelScalarRelationFilter, ModelWhereInput>
    experimentTestCases?: ExperimentTestCasesListRelationFilter
    testCaseResults?: TestCaseResultsListRelationFilter
  }

  export type ExperimentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    systemPrompt?: SortOrder
    modelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    model?: ModelOrderByWithRelationInput
    experimentTestCases?: ExperimentTestCasesOrderByRelationAggregateInput
    testCaseResults?: TestCaseResultsOrderByRelationAggregateInput
  }

  export type ExperimentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExperimentWhereInput | ExperimentWhereInput[]
    OR?: ExperimentWhereInput[]
    NOT?: ExperimentWhereInput | ExperimentWhereInput[]
    name?: StringFilter<"Experiment"> | string
    description?: StringNullableFilter<"Experiment"> | string | null
    systemPrompt?: StringFilter<"Experiment"> | string
    modelId?: StringFilter<"Experiment"> | string
    createdAt?: DateTimeFilter<"Experiment"> | Date | string
    updatedAt?: DateTimeFilter<"Experiment"> | Date | string
    model?: XOR<ModelScalarRelationFilter, ModelWhereInput>
    experimentTestCases?: ExperimentTestCasesListRelationFilter
    testCaseResults?: TestCaseResultsListRelationFilter
  }, "id">

  export type ExperimentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    systemPrompt?: SortOrder
    modelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExperimentCountOrderByAggregateInput
    _max?: ExperimentMaxOrderByAggregateInput
    _min?: ExperimentMinOrderByAggregateInput
  }

  export type ExperimentScalarWhereWithAggregatesInput = {
    AND?: ExperimentScalarWhereWithAggregatesInput | ExperimentScalarWhereWithAggregatesInput[]
    OR?: ExperimentScalarWhereWithAggregatesInput[]
    NOT?: ExperimentScalarWhereWithAggregatesInput | ExperimentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Experiment"> | string
    name?: StringWithAggregatesFilter<"Experiment"> | string
    description?: StringNullableWithAggregatesFilter<"Experiment"> | string | null
    systemPrompt?: StringWithAggregatesFilter<"Experiment"> | string
    modelId?: StringWithAggregatesFilter<"Experiment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Experiment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Experiment"> | Date | string
  }

  export type TestCaseWhereInput = {
    AND?: TestCaseWhereInput | TestCaseWhereInput[]
    OR?: TestCaseWhereInput[]
    NOT?: TestCaseWhereInput | TestCaseWhereInput[]
    id?: StringFilter<"TestCase"> | string
    inputMessage?: StringFilter<"TestCase"> | string
    expectedOutput?: StringNullableFilter<"TestCase"> | string | null
    createdAt?: DateTimeFilter<"TestCase"> | Date | string
    updatedAt?: DateTimeFilter<"TestCase"> | Date | string
    experimentTestCases?: ExperimentTestCasesListRelationFilter
    graders?: TestCaseGradersListRelationFilter
    testCaseResults?: TestCaseResultsListRelationFilter
  }

  export type TestCaseOrderByWithRelationInput = {
    id?: SortOrder
    inputMessage?: SortOrder
    expectedOutput?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    experimentTestCases?: ExperimentTestCasesOrderByRelationAggregateInput
    graders?: TestCaseGradersOrderByRelationAggregateInput
    testCaseResults?: TestCaseResultsOrderByRelationAggregateInput
  }

  export type TestCaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestCaseWhereInput | TestCaseWhereInput[]
    OR?: TestCaseWhereInput[]
    NOT?: TestCaseWhereInput | TestCaseWhereInput[]
    inputMessage?: StringFilter<"TestCase"> | string
    expectedOutput?: StringNullableFilter<"TestCase"> | string | null
    createdAt?: DateTimeFilter<"TestCase"> | Date | string
    updatedAt?: DateTimeFilter<"TestCase"> | Date | string
    experimentTestCases?: ExperimentTestCasesListRelationFilter
    graders?: TestCaseGradersListRelationFilter
    testCaseResults?: TestCaseResultsListRelationFilter
  }, "id">

  export type TestCaseOrderByWithAggregationInput = {
    id?: SortOrder
    inputMessage?: SortOrder
    expectedOutput?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TestCaseCountOrderByAggregateInput
    _max?: TestCaseMaxOrderByAggregateInput
    _min?: TestCaseMinOrderByAggregateInput
  }

  export type TestCaseScalarWhereWithAggregatesInput = {
    AND?: TestCaseScalarWhereWithAggregatesInput | TestCaseScalarWhereWithAggregatesInput[]
    OR?: TestCaseScalarWhereWithAggregatesInput[]
    NOT?: TestCaseScalarWhereWithAggregatesInput | TestCaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TestCase"> | string
    inputMessage?: StringWithAggregatesFilter<"TestCase"> | string
    expectedOutput?: StringNullableWithAggregatesFilter<"TestCase"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TestCase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TestCase"> | Date | string
  }

  export type ExperimentTestCasesWhereInput = {
    AND?: ExperimentTestCasesWhereInput | ExperimentTestCasesWhereInput[]
    OR?: ExperimentTestCasesWhereInput[]
    NOT?: ExperimentTestCasesWhereInput | ExperimentTestCasesWhereInput[]
    id?: StringFilter<"ExperimentTestCases"> | string
    experimentId?: StringFilter<"ExperimentTestCases"> | string
    testCaseId?: StringFilter<"ExperimentTestCases"> | string
    createdAt?: DateTimeFilter<"ExperimentTestCases"> | Date | string
    updatedAt?: DateTimeFilter<"ExperimentTestCases"> | Date | string
    experiment?: XOR<ExperimentScalarRelationFilter, ExperimentWhereInput>
    testCase?: XOR<TestCaseScalarRelationFilter, TestCaseWhereInput>
  }

  export type ExperimentTestCasesOrderByWithRelationInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    experiment?: ExperimentOrderByWithRelationInput
    testCase?: TestCaseOrderByWithRelationInput
  }

  export type ExperimentTestCasesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExperimentTestCasesWhereInput | ExperimentTestCasesWhereInput[]
    OR?: ExperimentTestCasesWhereInput[]
    NOT?: ExperimentTestCasesWhereInput | ExperimentTestCasesWhereInput[]
    experimentId?: StringFilter<"ExperimentTestCases"> | string
    testCaseId?: StringFilter<"ExperimentTestCases"> | string
    createdAt?: DateTimeFilter<"ExperimentTestCases"> | Date | string
    updatedAt?: DateTimeFilter<"ExperimentTestCases"> | Date | string
    experiment?: XOR<ExperimentScalarRelationFilter, ExperimentWhereInput>
    testCase?: XOR<TestCaseScalarRelationFilter, TestCaseWhereInput>
  }, "id">

  export type ExperimentTestCasesOrderByWithAggregationInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExperimentTestCasesCountOrderByAggregateInput
    _max?: ExperimentTestCasesMaxOrderByAggregateInput
    _min?: ExperimentTestCasesMinOrderByAggregateInput
  }

  export type ExperimentTestCasesScalarWhereWithAggregatesInput = {
    AND?: ExperimentTestCasesScalarWhereWithAggregatesInput | ExperimentTestCasesScalarWhereWithAggregatesInput[]
    OR?: ExperimentTestCasesScalarWhereWithAggregatesInput[]
    NOT?: ExperimentTestCasesScalarWhereWithAggregatesInput | ExperimentTestCasesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExperimentTestCases"> | string
    experimentId?: StringWithAggregatesFilter<"ExperimentTestCases"> | string
    testCaseId?: StringWithAggregatesFilter<"ExperimentTestCases"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ExperimentTestCases"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExperimentTestCases"> | Date | string
  }

  export type TestCaseGradersWhereInput = {
    AND?: TestCaseGradersWhereInput | TestCaseGradersWhereInput[]
    OR?: TestCaseGradersWhereInput[]
    NOT?: TestCaseGradersWhereInput | TestCaseGradersWhereInput[]
    id?: StringFilter<"TestCaseGraders"> | string
    testCaseId?: StringFilter<"TestCaseGraders"> | string
    graderType?: StringFilter<"TestCaseGraders"> | string
    graderConfig?: JsonNullableFilter<"TestCaseGraders">
    createdAt?: DateTimeFilter<"TestCaseGraders"> | Date | string
    updatedAt?: DateTimeFilter<"TestCaseGraders"> | Date | string
    testCase?: XOR<TestCaseScalarRelationFilter, TestCaseWhereInput>
  }

  export type TestCaseGradersOrderByWithRelationInput = {
    id?: SortOrder
    testCaseId?: SortOrder
    graderType?: SortOrder
    graderConfig?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    testCase?: TestCaseOrderByWithRelationInput
  }

  export type TestCaseGradersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestCaseGradersWhereInput | TestCaseGradersWhereInput[]
    OR?: TestCaseGradersWhereInput[]
    NOT?: TestCaseGradersWhereInput | TestCaseGradersWhereInput[]
    testCaseId?: StringFilter<"TestCaseGraders"> | string
    graderType?: StringFilter<"TestCaseGraders"> | string
    graderConfig?: JsonNullableFilter<"TestCaseGraders">
    createdAt?: DateTimeFilter<"TestCaseGraders"> | Date | string
    updatedAt?: DateTimeFilter<"TestCaseGraders"> | Date | string
    testCase?: XOR<TestCaseScalarRelationFilter, TestCaseWhereInput>
  }, "id">

  export type TestCaseGradersOrderByWithAggregationInput = {
    id?: SortOrder
    testCaseId?: SortOrder
    graderType?: SortOrder
    graderConfig?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TestCaseGradersCountOrderByAggregateInput
    _max?: TestCaseGradersMaxOrderByAggregateInput
    _min?: TestCaseGradersMinOrderByAggregateInput
  }

  export type TestCaseGradersScalarWhereWithAggregatesInput = {
    AND?: TestCaseGradersScalarWhereWithAggregatesInput | TestCaseGradersScalarWhereWithAggregatesInput[]
    OR?: TestCaseGradersScalarWhereWithAggregatesInput[]
    NOT?: TestCaseGradersScalarWhereWithAggregatesInput | TestCaseGradersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TestCaseGraders"> | string
    testCaseId?: StringWithAggregatesFilter<"TestCaseGraders"> | string
    graderType?: StringWithAggregatesFilter<"TestCaseGraders"> | string
    graderConfig?: JsonNullableWithAggregatesFilter<"TestCaseGraders">
    createdAt?: DateTimeWithAggregatesFilter<"TestCaseGraders"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TestCaseGraders"> | Date | string
  }

  export type TestCaseResultsWhereInput = {
    AND?: TestCaseResultsWhereInput | TestCaseResultsWhereInput[]
    OR?: TestCaseResultsWhereInput[]
    NOT?: TestCaseResultsWhereInput | TestCaseResultsWhereInput[]
    id?: StringFilter<"TestCaseResults"> | string
    experimentId?: StringFilter<"TestCaseResults"> | string
    testCaseId?: StringFilter<"TestCaseResults"> | string
    modelId?: StringFilter<"TestCaseResults"> | string
    responseText?: StringFilter<"TestCaseResults"> | string
    responseTimeMs?: IntFilter<"TestCaseResults"> | number
    graderType?: StringFilter<"TestCaseResults"> | string
    score?: FloatNullableFilter<"TestCaseResults"> | number | null
    createdAt?: DateTimeFilter<"TestCaseResults"> | Date | string
    updatedAt?: DateTimeFilter<"TestCaseResults"> | Date | string
    experiment?: XOR<ExperimentScalarRelationFilter, ExperimentWhereInput>
    testCase?: XOR<TestCaseScalarRelationFilter, TestCaseWhereInput>
    model?: XOR<ModelScalarRelationFilter, ModelWhereInput>
  }

  export type TestCaseResultsOrderByWithRelationInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    modelId?: SortOrder
    responseText?: SortOrder
    responseTimeMs?: SortOrder
    graderType?: SortOrder
    score?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    experiment?: ExperimentOrderByWithRelationInput
    testCase?: TestCaseOrderByWithRelationInput
    model?: ModelOrderByWithRelationInput
  }

  export type TestCaseResultsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestCaseResultsWhereInput | TestCaseResultsWhereInput[]
    OR?: TestCaseResultsWhereInput[]
    NOT?: TestCaseResultsWhereInput | TestCaseResultsWhereInput[]
    experimentId?: StringFilter<"TestCaseResults"> | string
    testCaseId?: StringFilter<"TestCaseResults"> | string
    modelId?: StringFilter<"TestCaseResults"> | string
    responseText?: StringFilter<"TestCaseResults"> | string
    responseTimeMs?: IntFilter<"TestCaseResults"> | number
    graderType?: StringFilter<"TestCaseResults"> | string
    score?: FloatNullableFilter<"TestCaseResults"> | number | null
    createdAt?: DateTimeFilter<"TestCaseResults"> | Date | string
    updatedAt?: DateTimeFilter<"TestCaseResults"> | Date | string
    experiment?: XOR<ExperimentScalarRelationFilter, ExperimentWhereInput>
    testCase?: XOR<TestCaseScalarRelationFilter, TestCaseWhereInput>
    model?: XOR<ModelScalarRelationFilter, ModelWhereInput>
  }, "id">

  export type TestCaseResultsOrderByWithAggregationInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    modelId?: SortOrder
    responseText?: SortOrder
    responseTimeMs?: SortOrder
    graderType?: SortOrder
    score?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TestCaseResultsCountOrderByAggregateInput
    _avg?: TestCaseResultsAvgOrderByAggregateInput
    _max?: TestCaseResultsMaxOrderByAggregateInput
    _min?: TestCaseResultsMinOrderByAggregateInput
    _sum?: TestCaseResultsSumOrderByAggregateInput
  }

  export type TestCaseResultsScalarWhereWithAggregatesInput = {
    AND?: TestCaseResultsScalarWhereWithAggregatesInput | TestCaseResultsScalarWhereWithAggregatesInput[]
    OR?: TestCaseResultsScalarWhereWithAggregatesInput[]
    NOT?: TestCaseResultsScalarWhereWithAggregatesInput | TestCaseResultsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TestCaseResults"> | string
    experimentId?: StringWithAggregatesFilter<"TestCaseResults"> | string
    testCaseId?: StringWithAggregatesFilter<"TestCaseResults"> | string
    modelId?: StringWithAggregatesFilter<"TestCaseResults"> | string
    responseText?: StringWithAggregatesFilter<"TestCaseResults"> | string
    responseTimeMs?: IntWithAggregatesFilter<"TestCaseResults"> | number
    graderType?: StringWithAggregatesFilter<"TestCaseResults"> | string
    score?: FloatNullableWithAggregatesFilter<"TestCaseResults"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"TestCaseResults"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TestCaseResults"> | Date | string
  }

  export type ModelCreateInput = {
    id?: string
    name: string
    provider: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Experiment?: ExperimentCreateNestedManyWithoutModelInput
    testCaseResults?: TestCaseResultsCreateNestedManyWithoutModelInput
  }

  export type ModelUncheckedCreateInput = {
    id?: string
    name: string
    provider: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Experiment?: ExperimentUncheckedCreateNestedManyWithoutModelInput
    testCaseResults?: TestCaseResultsUncheckedCreateNestedManyWithoutModelInput
  }

  export type ModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Experiment?: ExperimentUpdateManyWithoutModelNestedInput
    testCaseResults?: TestCaseResultsUpdateManyWithoutModelNestedInput
  }

  export type ModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Experiment?: ExperimentUncheckedUpdateManyWithoutModelNestedInput
    testCaseResults?: TestCaseResultsUncheckedUpdateManyWithoutModelNestedInput
  }

  export type ModelCreateManyInput = {
    id?: string
    name: string
    provider: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentCreateInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    model: ModelCreateNestedOneWithoutExperimentInput
    experimentTestCases?: ExperimentTestCasesCreateNestedManyWithoutExperimentInput
    testCaseResults?: TestCaseResultsCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    modelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedCreateNestedManyWithoutExperimentInput
    testCaseResults?: TestCaseResultsUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    model?: ModelUpdateOneRequiredWithoutExperimentNestedInput
    experimentTestCases?: ExperimentTestCasesUpdateManyWithoutExperimentNestedInput
    testCaseResults?: TestCaseResultsUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedUpdateManyWithoutExperimentNestedInput
    testCaseResults?: TestCaseResultsUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    modelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExperimentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseCreateInput = {
    id?: string
    inputMessage: string
    expectedOutput?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesCreateNestedManyWithoutTestCaseInput
    graders?: TestCaseGradersCreateNestedManyWithoutTestCaseInput
    testCaseResults?: TestCaseResultsCreateNestedManyWithoutTestCaseInput
  }

  export type TestCaseUncheckedCreateInput = {
    id?: string
    inputMessage: string
    expectedOutput?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedCreateNestedManyWithoutTestCaseInput
    graders?: TestCaseGradersUncheckedCreateNestedManyWithoutTestCaseInput
    testCaseResults?: TestCaseResultsUncheckedCreateNestedManyWithoutTestCaseInput
  }

  export type TestCaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUpdateManyWithoutTestCaseNestedInput
    graders?: TestCaseGradersUpdateManyWithoutTestCaseNestedInput
    testCaseResults?: TestCaseResultsUpdateManyWithoutTestCaseNestedInput
  }

  export type TestCaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedUpdateManyWithoutTestCaseNestedInput
    graders?: TestCaseGradersUncheckedUpdateManyWithoutTestCaseNestedInput
    testCaseResults?: TestCaseResultsUncheckedUpdateManyWithoutTestCaseNestedInput
  }

  export type TestCaseCreateManyInput = {
    id?: string
    inputMessage: string
    expectedOutput?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentTestCasesCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment: ExperimentCreateNestedOneWithoutExperimentTestCasesInput
    testCase: TestCaseCreateNestedOneWithoutExperimentTestCasesInput
  }

  export type ExperimentTestCasesUncheckedCreateInput = {
    id?: string
    experimentId: string
    testCaseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExperimentTestCasesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneRequiredWithoutExperimentTestCasesNestedInput
    testCase?: TestCaseUpdateOneRequiredWithoutExperimentTestCasesNestedInput
  }

  export type ExperimentTestCasesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentTestCasesCreateManyInput = {
    id?: string
    experimentId: string
    testCaseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExperimentTestCasesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentTestCasesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseGradersCreateInput = {
    id?: string
    graderType: string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    testCase: TestCaseCreateNestedOneWithoutGradersInput
  }

  export type TestCaseGradersUncheckedCreateInput = {
    id?: string
    testCaseId: string
    graderType: string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseGradersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    graderType?: StringFieldUpdateOperationsInput | string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCase?: TestCaseUpdateOneRequiredWithoutGradersNestedInput
  }

  export type TestCaseGradersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    graderType?: StringFieldUpdateOperationsInput | string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseGradersCreateManyInput = {
    id?: string
    testCaseId: string
    graderType: string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseGradersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    graderType?: StringFieldUpdateOperationsInput | string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseGradersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    graderType?: StringFieldUpdateOperationsInput | string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultsCreateInput = {
    id?: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment: ExperimentCreateNestedOneWithoutTestCaseResultsInput
    testCase: TestCaseCreateNestedOneWithoutTestCaseResultsInput
    model: ModelCreateNestedOneWithoutTestCaseResultsInput
  }

  export type TestCaseResultsUncheckedCreateInput = {
    id?: string
    experimentId: string
    testCaseId: string
    modelId: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneRequiredWithoutTestCaseResultsNestedInput
    testCase?: TestCaseUpdateOneRequiredWithoutTestCaseResultsNestedInput
    model?: ModelUpdateOneRequiredWithoutTestCaseResultsNestedInput
  }

  export type TestCaseResultsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultsCreateManyInput = {
    id?: string
    experimentId: string
    testCaseId: string
    modelId: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ExperimentListRelationFilter = {
    every?: ExperimentWhereInput
    some?: ExperimentWhereInput
    none?: ExperimentWhereInput
  }

  export type TestCaseResultsListRelationFilter = {
    every?: TestCaseResultsWhereInput
    some?: TestCaseResultsWhereInput
    none?: TestCaseResultsWhereInput
  }

  export type ExperimentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestCaseResultsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ModelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ModelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ModelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    provider?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ModelScalarRelationFilter = {
    is?: ModelWhereInput
    isNot?: ModelWhereInput
  }

  export type ExperimentTestCasesListRelationFilter = {
    every?: ExperimentTestCasesWhereInput
    some?: ExperimentTestCasesWhereInput
    none?: ExperimentTestCasesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ExperimentTestCasesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExperimentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    systemPrompt?: SortOrder
    modelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExperimentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    systemPrompt?: SortOrder
    modelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExperimentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    systemPrompt?: SortOrder
    modelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TestCaseGradersListRelationFilter = {
    every?: TestCaseGradersWhereInput
    some?: TestCaseGradersWhereInput
    none?: TestCaseGradersWhereInput
  }

  export type TestCaseGradersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestCaseCountOrderByAggregateInput = {
    id?: SortOrder
    inputMessage?: SortOrder
    expectedOutput?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseMaxOrderByAggregateInput = {
    id?: SortOrder
    inputMessage?: SortOrder
    expectedOutput?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseMinOrderByAggregateInput = {
    id?: SortOrder
    inputMessage?: SortOrder
    expectedOutput?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExperimentScalarRelationFilter = {
    is?: ExperimentWhereInput
    isNot?: ExperimentWhereInput
  }

  export type TestCaseScalarRelationFilter = {
    is?: TestCaseWhereInput
    isNot?: TestCaseWhereInput
  }

  export type ExperimentTestCasesCountOrderByAggregateInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExperimentTestCasesMaxOrderByAggregateInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExperimentTestCasesMinOrderByAggregateInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TestCaseGradersCountOrderByAggregateInput = {
    id?: SortOrder
    testCaseId?: SortOrder
    graderType?: SortOrder
    graderConfig?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseGradersMaxOrderByAggregateInput = {
    id?: SortOrder
    testCaseId?: SortOrder
    graderType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseGradersMinOrderByAggregateInput = {
    id?: SortOrder
    testCaseId?: SortOrder
    graderType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type TestCaseResultsCountOrderByAggregateInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    modelId?: SortOrder
    responseText?: SortOrder
    responseTimeMs?: SortOrder
    graderType?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseResultsAvgOrderByAggregateInput = {
    responseTimeMs?: SortOrder
    score?: SortOrder
  }

  export type TestCaseResultsMaxOrderByAggregateInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    modelId?: SortOrder
    responseText?: SortOrder
    responseTimeMs?: SortOrder
    graderType?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseResultsMinOrderByAggregateInput = {
    id?: SortOrder
    experimentId?: SortOrder
    testCaseId?: SortOrder
    modelId?: SortOrder
    responseText?: SortOrder
    responseTimeMs?: SortOrder
    graderType?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseResultsSumOrderByAggregateInput = {
    responseTimeMs?: SortOrder
    score?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ExperimentCreateNestedManyWithoutModelInput = {
    create?: XOR<ExperimentCreateWithoutModelInput, ExperimentUncheckedCreateWithoutModelInput> | ExperimentCreateWithoutModelInput[] | ExperimentUncheckedCreateWithoutModelInput[]
    connectOrCreate?: ExperimentCreateOrConnectWithoutModelInput | ExperimentCreateOrConnectWithoutModelInput[]
    createMany?: ExperimentCreateManyModelInputEnvelope
    connect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
  }

  export type TestCaseResultsCreateNestedManyWithoutModelInput = {
    create?: XOR<TestCaseResultsCreateWithoutModelInput, TestCaseResultsUncheckedCreateWithoutModelInput> | TestCaseResultsCreateWithoutModelInput[] | TestCaseResultsUncheckedCreateWithoutModelInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutModelInput | TestCaseResultsCreateOrConnectWithoutModelInput[]
    createMany?: TestCaseResultsCreateManyModelInputEnvelope
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
  }

  export type ExperimentUncheckedCreateNestedManyWithoutModelInput = {
    create?: XOR<ExperimentCreateWithoutModelInput, ExperimentUncheckedCreateWithoutModelInput> | ExperimentCreateWithoutModelInput[] | ExperimentUncheckedCreateWithoutModelInput[]
    connectOrCreate?: ExperimentCreateOrConnectWithoutModelInput | ExperimentCreateOrConnectWithoutModelInput[]
    createMany?: ExperimentCreateManyModelInputEnvelope
    connect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
  }

  export type TestCaseResultsUncheckedCreateNestedManyWithoutModelInput = {
    create?: XOR<TestCaseResultsCreateWithoutModelInput, TestCaseResultsUncheckedCreateWithoutModelInput> | TestCaseResultsCreateWithoutModelInput[] | TestCaseResultsUncheckedCreateWithoutModelInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutModelInput | TestCaseResultsCreateOrConnectWithoutModelInput[]
    createMany?: TestCaseResultsCreateManyModelInputEnvelope
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ExperimentUpdateManyWithoutModelNestedInput = {
    create?: XOR<ExperimentCreateWithoutModelInput, ExperimentUncheckedCreateWithoutModelInput> | ExperimentCreateWithoutModelInput[] | ExperimentUncheckedCreateWithoutModelInput[]
    connectOrCreate?: ExperimentCreateOrConnectWithoutModelInput | ExperimentCreateOrConnectWithoutModelInput[]
    upsert?: ExperimentUpsertWithWhereUniqueWithoutModelInput | ExperimentUpsertWithWhereUniqueWithoutModelInput[]
    createMany?: ExperimentCreateManyModelInputEnvelope
    set?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    disconnect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    delete?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    connect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    update?: ExperimentUpdateWithWhereUniqueWithoutModelInput | ExperimentUpdateWithWhereUniqueWithoutModelInput[]
    updateMany?: ExperimentUpdateManyWithWhereWithoutModelInput | ExperimentUpdateManyWithWhereWithoutModelInput[]
    deleteMany?: ExperimentScalarWhereInput | ExperimentScalarWhereInput[]
  }

  export type TestCaseResultsUpdateManyWithoutModelNestedInput = {
    create?: XOR<TestCaseResultsCreateWithoutModelInput, TestCaseResultsUncheckedCreateWithoutModelInput> | TestCaseResultsCreateWithoutModelInput[] | TestCaseResultsUncheckedCreateWithoutModelInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutModelInput | TestCaseResultsCreateOrConnectWithoutModelInput[]
    upsert?: TestCaseResultsUpsertWithWhereUniqueWithoutModelInput | TestCaseResultsUpsertWithWhereUniqueWithoutModelInput[]
    createMany?: TestCaseResultsCreateManyModelInputEnvelope
    set?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    disconnect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    delete?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    update?: TestCaseResultsUpdateWithWhereUniqueWithoutModelInput | TestCaseResultsUpdateWithWhereUniqueWithoutModelInput[]
    updateMany?: TestCaseResultsUpdateManyWithWhereWithoutModelInput | TestCaseResultsUpdateManyWithWhereWithoutModelInput[]
    deleteMany?: TestCaseResultsScalarWhereInput | TestCaseResultsScalarWhereInput[]
  }

  export type ExperimentUncheckedUpdateManyWithoutModelNestedInput = {
    create?: XOR<ExperimentCreateWithoutModelInput, ExperimentUncheckedCreateWithoutModelInput> | ExperimentCreateWithoutModelInput[] | ExperimentUncheckedCreateWithoutModelInput[]
    connectOrCreate?: ExperimentCreateOrConnectWithoutModelInput | ExperimentCreateOrConnectWithoutModelInput[]
    upsert?: ExperimentUpsertWithWhereUniqueWithoutModelInput | ExperimentUpsertWithWhereUniqueWithoutModelInput[]
    createMany?: ExperimentCreateManyModelInputEnvelope
    set?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    disconnect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    delete?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    connect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    update?: ExperimentUpdateWithWhereUniqueWithoutModelInput | ExperimentUpdateWithWhereUniqueWithoutModelInput[]
    updateMany?: ExperimentUpdateManyWithWhereWithoutModelInput | ExperimentUpdateManyWithWhereWithoutModelInput[]
    deleteMany?: ExperimentScalarWhereInput | ExperimentScalarWhereInput[]
  }

  export type TestCaseResultsUncheckedUpdateManyWithoutModelNestedInput = {
    create?: XOR<TestCaseResultsCreateWithoutModelInput, TestCaseResultsUncheckedCreateWithoutModelInput> | TestCaseResultsCreateWithoutModelInput[] | TestCaseResultsUncheckedCreateWithoutModelInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutModelInput | TestCaseResultsCreateOrConnectWithoutModelInput[]
    upsert?: TestCaseResultsUpsertWithWhereUniqueWithoutModelInput | TestCaseResultsUpsertWithWhereUniqueWithoutModelInput[]
    createMany?: TestCaseResultsCreateManyModelInputEnvelope
    set?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    disconnect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    delete?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    update?: TestCaseResultsUpdateWithWhereUniqueWithoutModelInput | TestCaseResultsUpdateWithWhereUniqueWithoutModelInput[]
    updateMany?: TestCaseResultsUpdateManyWithWhereWithoutModelInput | TestCaseResultsUpdateManyWithWhereWithoutModelInput[]
    deleteMany?: TestCaseResultsScalarWhereInput | TestCaseResultsScalarWhereInput[]
  }

  export type ModelCreateNestedOneWithoutExperimentInput = {
    create?: XOR<ModelCreateWithoutExperimentInput, ModelUncheckedCreateWithoutExperimentInput>
    connectOrCreate?: ModelCreateOrConnectWithoutExperimentInput
    connect?: ModelWhereUniqueInput
  }

  export type ExperimentTestCasesCreateNestedManyWithoutExperimentInput = {
    create?: XOR<ExperimentTestCasesCreateWithoutExperimentInput, ExperimentTestCasesUncheckedCreateWithoutExperimentInput> | ExperimentTestCasesCreateWithoutExperimentInput[] | ExperimentTestCasesUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: ExperimentTestCasesCreateOrConnectWithoutExperimentInput | ExperimentTestCasesCreateOrConnectWithoutExperimentInput[]
    createMany?: ExperimentTestCasesCreateManyExperimentInputEnvelope
    connect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
  }

  export type TestCaseResultsCreateNestedManyWithoutExperimentInput = {
    create?: XOR<TestCaseResultsCreateWithoutExperimentInput, TestCaseResultsUncheckedCreateWithoutExperimentInput> | TestCaseResultsCreateWithoutExperimentInput[] | TestCaseResultsUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutExperimentInput | TestCaseResultsCreateOrConnectWithoutExperimentInput[]
    createMany?: TestCaseResultsCreateManyExperimentInputEnvelope
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
  }

  export type ExperimentTestCasesUncheckedCreateNestedManyWithoutExperimentInput = {
    create?: XOR<ExperimentTestCasesCreateWithoutExperimentInput, ExperimentTestCasesUncheckedCreateWithoutExperimentInput> | ExperimentTestCasesCreateWithoutExperimentInput[] | ExperimentTestCasesUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: ExperimentTestCasesCreateOrConnectWithoutExperimentInput | ExperimentTestCasesCreateOrConnectWithoutExperimentInput[]
    createMany?: ExperimentTestCasesCreateManyExperimentInputEnvelope
    connect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
  }

  export type TestCaseResultsUncheckedCreateNestedManyWithoutExperimentInput = {
    create?: XOR<TestCaseResultsCreateWithoutExperimentInput, TestCaseResultsUncheckedCreateWithoutExperimentInput> | TestCaseResultsCreateWithoutExperimentInput[] | TestCaseResultsUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutExperimentInput | TestCaseResultsCreateOrConnectWithoutExperimentInput[]
    createMany?: TestCaseResultsCreateManyExperimentInputEnvelope
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ModelUpdateOneRequiredWithoutExperimentNestedInput = {
    create?: XOR<ModelCreateWithoutExperimentInput, ModelUncheckedCreateWithoutExperimentInput>
    connectOrCreate?: ModelCreateOrConnectWithoutExperimentInput
    upsert?: ModelUpsertWithoutExperimentInput
    connect?: ModelWhereUniqueInput
    update?: XOR<XOR<ModelUpdateToOneWithWhereWithoutExperimentInput, ModelUpdateWithoutExperimentInput>, ModelUncheckedUpdateWithoutExperimentInput>
  }

  export type ExperimentTestCasesUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<ExperimentTestCasesCreateWithoutExperimentInput, ExperimentTestCasesUncheckedCreateWithoutExperimentInput> | ExperimentTestCasesCreateWithoutExperimentInput[] | ExperimentTestCasesUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: ExperimentTestCasesCreateOrConnectWithoutExperimentInput | ExperimentTestCasesCreateOrConnectWithoutExperimentInput[]
    upsert?: ExperimentTestCasesUpsertWithWhereUniqueWithoutExperimentInput | ExperimentTestCasesUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: ExperimentTestCasesCreateManyExperimentInputEnvelope
    set?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    disconnect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    delete?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    connect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    update?: ExperimentTestCasesUpdateWithWhereUniqueWithoutExperimentInput | ExperimentTestCasesUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: ExperimentTestCasesUpdateManyWithWhereWithoutExperimentInput | ExperimentTestCasesUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: ExperimentTestCasesScalarWhereInput | ExperimentTestCasesScalarWhereInput[]
  }

  export type TestCaseResultsUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<TestCaseResultsCreateWithoutExperimentInput, TestCaseResultsUncheckedCreateWithoutExperimentInput> | TestCaseResultsCreateWithoutExperimentInput[] | TestCaseResultsUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutExperimentInput | TestCaseResultsCreateOrConnectWithoutExperimentInput[]
    upsert?: TestCaseResultsUpsertWithWhereUniqueWithoutExperimentInput | TestCaseResultsUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: TestCaseResultsCreateManyExperimentInputEnvelope
    set?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    disconnect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    delete?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    update?: TestCaseResultsUpdateWithWhereUniqueWithoutExperimentInput | TestCaseResultsUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: TestCaseResultsUpdateManyWithWhereWithoutExperimentInput | TestCaseResultsUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: TestCaseResultsScalarWhereInput | TestCaseResultsScalarWhereInput[]
  }

  export type ExperimentTestCasesUncheckedUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<ExperimentTestCasesCreateWithoutExperimentInput, ExperimentTestCasesUncheckedCreateWithoutExperimentInput> | ExperimentTestCasesCreateWithoutExperimentInput[] | ExperimentTestCasesUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: ExperimentTestCasesCreateOrConnectWithoutExperimentInput | ExperimentTestCasesCreateOrConnectWithoutExperimentInput[]
    upsert?: ExperimentTestCasesUpsertWithWhereUniqueWithoutExperimentInput | ExperimentTestCasesUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: ExperimentTestCasesCreateManyExperimentInputEnvelope
    set?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    disconnect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    delete?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    connect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    update?: ExperimentTestCasesUpdateWithWhereUniqueWithoutExperimentInput | ExperimentTestCasesUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: ExperimentTestCasesUpdateManyWithWhereWithoutExperimentInput | ExperimentTestCasesUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: ExperimentTestCasesScalarWhereInput | ExperimentTestCasesScalarWhereInput[]
  }

  export type TestCaseResultsUncheckedUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<TestCaseResultsCreateWithoutExperimentInput, TestCaseResultsUncheckedCreateWithoutExperimentInput> | TestCaseResultsCreateWithoutExperimentInput[] | TestCaseResultsUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutExperimentInput | TestCaseResultsCreateOrConnectWithoutExperimentInput[]
    upsert?: TestCaseResultsUpsertWithWhereUniqueWithoutExperimentInput | TestCaseResultsUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: TestCaseResultsCreateManyExperimentInputEnvelope
    set?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    disconnect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    delete?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    update?: TestCaseResultsUpdateWithWhereUniqueWithoutExperimentInput | TestCaseResultsUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: TestCaseResultsUpdateManyWithWhereWithoutExperimentInput | TestCaseResultsUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: TestCaseResultsScalarWhereInput | TestCaseResultsScalarWhereInput[]
  }

  export type ExperimentTestCasesCreateNestedManyWithoutTestCaseInput = {
    create?: XOR<ExperimentTestCasesCreateWithoutTestCaseInput, ExperimentTestCasesUncheckedCreateWithoutTestCaseInput> | ExperimentTestCasesCreateWithoutTestCaseInput[] | ExperimentTestCasesUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: ExperimentTestCasesCreateOrConnectWithoutTestCaseInput | ExperimentTestCasesCreateOrConnectWithoutTestCaseInput[]
    createMany?: ExperimentTestCasesCreateManyTestCaseInputEnvelope
    connect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
  }

  export type TestCaseGradersCreateNestedManyWithoutTestCaseInput = {
    create?: XOR<TestCaseGradersCreateWithoutTestCaseInput, TestCaseGradersUncheckedCreateWithoutTestCaseInput> | TestCaseGradersCreateWithoutTestCaseInput[] | TestCaseGradersUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: TestCaseGradersCreateOrConnectWithoutTestCaseInput | TestCaseGradersCreateOrConnectWithoutTestCaseInput[]
    createMany?: TestCaseGradersCreateManyTestCaseInputEnvelope
    connect?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
  }

  export type TestCaseResultsCreateNestedManyWithoutTestCaseInput = {
    create?: XOR<TestCaseResultsCreateWithoutTestCaseInput, TestCaseResultsUncheckedCreateWithoutTestCaseInput> | TestCaseResultsCreateWithoutTestCaseInput[] | TestCaseResultsUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutTestCaseInput | TestCaseResultsCreateOrConnectWithoutTestCaseInput[]
    createMany?: TestCaseResultsCreateManyTestCaseInputEnvelope
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
  }

  export type ExperimentTestCasesUncheckedCreateNestedManyWithoutTestCaseInput = {
    create?: XOR<ExperimentTestCasesCreateWithoutTestCaseInput, ExperimentTestCasesUncheckedCreateWithoutTestCaseInput> | ExperimentTestCasesCreateWithoutTestCaseInput[] | ExperimentTestCasesUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: ExperimentTestCasesCreateOrConnectWithoutTestCaseInput | ExperimentTestCasesCreateOrConnectWithoutTestCaseInput[]
    createMany?: ExperimentTestCasesCreateManyTestCaseInputEnvelope
    connect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
  }

  export type TestCaseGradersUncheckedCreateNestedManyWithoutTestCaseInput = {
    create?: XOR<TestCaseGradersCreateWithoutTestCaseInput, TestCaseGradersUncheckedCreateWithoutTestCaseInput> | TestCaseGradersCreateWithoutTestCaseInput[] | TestCaseGradersUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: TestCaseGradersCreateOrConnectWithoutTestCaseInput | TestCaseGradersCreateOrConnectWithoutTestCaseInput[]
    createMany?: TestCaseGradersCreateManyTestCaseInputEnvelope
    connect?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
  }

  export type TestCaseResultsUncheckedCreateNestedManyWithoutTestCaseInput = {
    create?: XOR<TestCaseResultsCreateWithoutTestCaseInput, TestCaseResultsUncheckedCreateWithoutTestCaseInput> | TestCaseResultsCreateWithoutTestCaseInput[] | TestCaseResultsUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutTestCaseInput | TestCaseResultsCreateOrConnectWithoutTestCaseInput[]
    createMany?: TestCaseResultsCreateManyTestCaseInputEnvelope
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
  }

  export type ExperimentTestCasesUpdateManyWithoutTestCaseNestedInput = {
    create?: XOR<ExperimentTestCasesCreateWithoutTestCaseInput, ExperimentTestCasesUncheckedCreateWithoutTestCaseInput> | ExperimentTestCasesCreateWithoutTestCaseInput[] | ExperimentTestCasesUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: ExperimentTestCasesCreateOrConnectWithoutTestCaseInput | ExperimentTestCasesCreateOrConnectWithoutTestCaseInput[]
    upsert?: ExperimentTestCasesUpsertWithWhereUniqueWithoutTestCaseInput | ExperimentTestCasesUpsertWithWhereUniqueWithoutTestCaseInput[]
    createMany?: ExperimentTestCasesCreateManyTestCaseInputEnvelope
    set?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    disconnect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    delete?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    connect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    update?: ExperimentTestCasesUpdateWithWhereUniqueWithoutTestCaseInput | ExperimentTestCasesUpdateWithWhereUniqueWithoutTestCaseInput[]
    updateMany?: ExperimentTestCasesUpdateManyWithWhereWithoutTestCaseInput | ExperimentTestCasesUpdateManyWithWhereWithoutTestCaseInput[]
    deleteMany?: ExperimentTestCasesScalarWhereInput | ExperimentTestCasesScalarWhereInput[]
  }

  export type TestCaseGradersUpdateManyWithoutTestCaseNestedInput = {
    create?: XOR<TestCaseGradersCreateWithoutTestCaseInput, TestCaseGradersUncheckedCreateWithoutTestCaseInput> | TestCaseGradersCreateWithoutTestCaseInput[] | TestCaseGradersUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: TestCaseGradersCreateOrConnectWithoutTestCaseInput | TestCaseGradersCreateOrConnectWithoutTestCaseInput[]
    upsert?: TestCaseGradersUpsertWithWhereUniqueWithoutTestCaseInput | TestCaseGradersUpsertWithWhereUniqueWithoutTestCaseInput[]
    createMany?: TestCaseGradersCreateManyTestCaseInputEnvelope
    set?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
    disconnect?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
    delete?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
    connect?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
    update?: TestCaseGradersUpdateWithWhereUniqueWithoutTestCaseInput | TestCaseGradersUpdateWithWhereUniqueWithoutTestCaseInput[]
    updateMany?: TestCaseGradersUpdateManyWithWhereWithoutTestCaseInput | TestCaseGradersUpdateManyWithWhereWithoutTestCaseInput[]
    deleteMany?: TestCaseGradersScalarWhereInput | TestCaseGradersScalarWhereInput[]
  }

  export type TestCaseResultsUpdateManyWithoutTestCaseNestedInput = {
    create?: XOR<TestCaseResultsCreateWithoutTestCaseInput, TestCaseResultsUncheckedCreateWithoutTestCaseInput> | TestCaseResultsCreateWithoutTestCaseInput[] | TestCaseResultsUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutTestCaseInput | TestCaseResultsCreateOrConnectWithoutTestCaseInput[]
    upsert?: TestCaseResultsUpsertWithWhereUniqueWithoutTestCaseInput | TestCaseResultsUpsertWithWhereUniqueWithoutTestCaseInput[]
    createMany?: TestCaseResultsCreateManyTestCaseInputEnvelope
    set?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    disconnect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    delete?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    update?: TestCaseResultsUpdateWithWhereUniqueWithoutTestCaseInput | TestCaseResultsUpdateWithWhereUniqueWithoutTestCaseInput[]
    updateMany?: TestCaseResultsUpdateManyWithWhereWithoutTestCaseInput | TestCaseResultsUpdateManyWithWhereWithoutTestCaseInput[]
    deleteMany?: TestCaseResultsScalarWhereInput | TestCaseResultsScalarWhereInput[]
  }

  export type ExperimentTestCasesUncheckedUpdateManyWithoutTestCaseNestedInput = {
    create?: XOR<ExperimentTestCasesCreateWithoutTestCaseInput, ExperimentTestCasesUncheckedCreateWithoutTestCaseInput> | ExperimentTestCasesCreateWithoutTestCaseInput[] | ExperimentTestCasesUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: ExperimentTestCasesCreateOrConnectWithoutTestCaseInput | ExperimentTestCasesCreateOrConnectWithoutTestCaseInput[]
    upsert?: ExperimentTestCasesUpsertWithWhereUniqueWithoutTestCaseInput | ExperimentTestCasesUpsertWithWhereUniqueWithoutTestCaseInput[]
    createMany?: ExperimentTestCasesCreateManyTestCaseInputEnvelope
    set?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    disconnect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    delete?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    connect?: ExperimentTestCasesWhereUniqueInput | ExperimentTestCasesWhereUniqueInput[]
    update?: ExperimentTestCasesUpdateWithWhereUniqueWithoutTestCaseInput | ExperimentTestCasesUpdateWithWhereUniqueWithoutTestCaseInput[]
    updateMany?: ExperimentTestCasesUpdateManyWithWhereWithoutTestCaseInput | ExperimentTestCasesUpdateManyWithWhereWithoutTestCaseInput[]
    deleteMany?: ExperimentTestCasesScalarWhereInput | ExperimentTestCasesScalarWhereInput[]
  }

  export type TestCaseGradersUncheckedUpdateManyWithoutTestCaseNestedInput = {
    create?: XOR<TestCaseGradersCreateWithoutTestCaseInput, TestCaseGradersUncheckedCreateWithoutTestCaseInput> | TestCaseGradersCreateWithoutTestCaseInput[] | TestCaseGradersUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: TestCaseGradersCreateOrConnectWithoutTestCaseInput | TestCaseGradersCreateOrConnectWithoutTestCaseInput[]
    upsert?: TestCaseGradersUpsertWithWhereUniqueWithoutTestCaseInput | TestCaseGradersUpsertWithWhereUniqueWithoutTestCaseInput[]
    createMany?: TestCaseGradersCreateManyTestCaseInputEnvelope
    set?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
    disconnect?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
    delete?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
    connect?: TestCaseGradersWhereUniqueInput | TestCaseGradersWhereUniqueInput[]
    update?: TestCaseGradersUpdateWithWhereUniqueWithoutTestCaseInput | TestCaseGradersUpdateWithWhereUniqueWithoutTestCaseInput[]
    updateMany?: TestCaseGradersUpdateManyWithWhereWithoutTestCaseInput | TestCaseGradersUpdateManyWithWhereWithoutTestCaseInput[]
    deleteMany?: TestCaseGradersScalarWhereInput | TestCaseGradersScalarWhereInput[]
  }

  export type TestCaseResultsUncheckedUpdateManyWithoutTestCaseNestedInput = {
    create?: XOR<TestCaseResultsCreateWithoutTestCaseInput, TestCaseResultsUncheckedCreateWithoutTestCaseInput> | TestCaseResultsCreateWithoutTestCaseInput[] | TestCaseResultsUncheckedCreateWithoutTestCaseInput[]
    connectOrCreate?: TestCaseResultsCreateOrConnectWithoutTestCaseInput | TestCaseResultsCreateOrConnectWithoutTestCaseInput[]
    upsert?: TestCaseResultsUpsertWithWhereUniqueWithoutTestCaseInput | TestCaseResultsUpsertWithWhereUniqueWithoutTestCaseInput[]
    createMany?: TestCaseResultsCreateManyTestCaseInputEnvelope
    set?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    disconnect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    delete?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    connect?: TestCaseResultsWhereUniqueInput | TestCaseResultsWhereUniqueInput[]
    update?: TestCaseResultsUpdateWithWhereUniqueWithoutTestCaseInput | TestCaseResultsUpdateWithWhereUniqueWithoutTestCaseInput[]
    updateMany?: TestCaseResultsUpdateManyWithWhereWithoutTestCaseInput | TestCaseResultsUpdateManyWithWhereWithoutTestCaseInput[]
    deleteMany?: TestCaseResultsScalarWhereInput | TestCaseResultsScalarWhereInput[]
  }

  export type ExperimentCreateNestedOneWithoutExperimentTestCasesInput = {
    create?: XOR<ExperimentCreateWithoutExperimentTestCasesInput, ExperimentUncheckedCreateWithoutExperimentTestCasesInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutExperimentTestCasesInput
    connect?: ExperimentWhereUniqueInput
  }

  export type TestCaseCreateNestedOneWithoutExperimentTestCasesInput = {
    create?: XOR<TestCaseCreateWithoutExperimentTestCasesInput, TestCaseUncheckedCreateWithoutExperimentTestCasesInput>
    connectOrCreate?: TestCaseCreateOrConnectWithoutExperimentTestCasesInput
    connect?: TestCaseWhereUniqueInput
  }

  export type ExperimentUpdateOneRequiredWithoutExperimentTestCasesNestedInput = {
    create?: XOR<ExperimentCreateWithoutExperimentTestCasesInput, ExperimentUncheckedCreateWithoutExperimentTestCasesInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutExperimentTestCasesInput
    upsert?: ExperimentUpsertWithoutExperimentTestCasesInput
    connect?: ExperimentWhereUniqueInput
    update?: XOR<XOR<ExperimentUpdateToOneWithWhereWithoutExperimentTestCasesInput, ExperimentUpdateWithoutExperimentTestCasesInput>, ExperimentUncheckedUpdateWithoutExperimentTestCasesInput>
  }

  export type TestCaseUpdateOneRequiredWithoutExperimentTestCasesNestedInput = {
    create?: XOR<TestCaseCreateWithoutExperimentTestCasesInput, TestCaseUncheckedCreateWithoutExperimentTestCasesInput>
    connectOrCreate?: TestCaseCreateOrConnectWithoutExperimentTestCasesInput
    upsert?: TestCaseUpsertWithoutExperimentTestCasesInput
    connect?: TestCaseWhereUniqueInput
    update?: XOR<XOR<TestCaseUpdateToOneWithWhereWithoutExperimentTestCasesInput, TestCaseUpdateWithoutExperimentTestCasesInput>, TestCaseUncheckedUpdateWithoutExperimentTestCasesInput>
  }

  export type TestCaseCreateNestedOneWithoutGradersInput = {
    create?: XOR<TestCaseCreateWithoutGradersInput, TestCaseUncheckedCreateWithoutGradersInput>
    connectOrCreate?: TestCaseCreateOrConnectWithoutGradersInput
    connect?: TestCaseWhereUniqueInput
  }

  export type TestCaseUpdateOneRequiredWithoutGradersNestedInput = {
    create?: XOR<TestCaseCreateWithoutGradersInput, TestCaseUncheckedCreateWithoutGradersInput>
    connectOrCreate?: TestCaseCreateOrConnectWithoutGradersInput
    upsert?: TestCaseUpsertWithoutGradersInput
    connect?: TestCaseWhereUniqueInput
    update?: XOR<XOR<TestCaseUpdateToOneWithWhereWithoutGradersInput, TestCaseUpdateWithoutGradersInput>, TestCaseUncheckedUpdateWithoutGradersInput>
  }

  export type ExperimentCreateNestedOneWithoutTestCaseResultsInput = {
    create?: XOR<ExperimentCreateWithoutTestCaseResultsInput, ExperimentUncheckedCreateWithoutTestCaseResultsInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutTestCaseResultsInput
    connect?: ExperimentWhereUniqueInput
  }

  export type TestCaseCreateNestedOneWithoutTestCaseResultsInput = {
    create?: XOR<TestCaseCreateWithoutTestCaseResultsInput, TestCaseUncheckedCreateWithoutTestCaseResultsInput>
    connectOrCreate?: TestCaseCreateOrConnectWithoutTestCaseResultsInput
    connect?: TestCaseWhereUniqueInput
  }

  export type ModelCreateNestedOneWithoutTestCaseResultsInput = {
    create?: XOR<ModelCreateWithoutTestCaseResultsInput, ModelUncheckedCreateWithoutTestCaseResultsInput>
    connectOrCreate?: ModelCreateOrConnectWithoutTestCaseResultsInput
    connect?: ModelWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ExperimentUpdateOneRequiredWithoutTestCaseResultsNestedInput = {
    create?: XOR<ExperimentCreateWithoutTestCaseResultsInput, ExperimentUncheckedCreateWithoutTestCaseResultsInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutTestCaseResultsInput
    upsert?: ExperimentUpsertWithoutTestCaseResultsInput
    connect?: ExperimentWhereUniqueInput
    update?: XOR<XOR<ExperimentUpdateToOneWithWhereWithoutTestCaseResultsInput, ExperimentUpdateWithoutTestCaseResultsInput>, ExperimentUncheckedUpdateWithoutTestCaseResultsInput>
  }

  export type TestCaseUpdateOneRequiredWithoutTestCaseResultsNestedInput = {
    create?: XOR<TestCaseCreateWithoutTestCaseResultsInput, TestCaseUncheckedCreateWithoutTestCaseResultsInput>
    connectOrCreate?: TestCaseCreateOrConnectWithoutTestCaseResultsInput
    upsert?: TestCaseUpsertWithoutTestCaseResultsInput
    connect?: TestCaseWhereUniqueInput
    update?: XOR<XOR<TestCaseUpdateToOneWithWhereWithoutTestCaseResultsInput, TestCaseUpdateWithoutTestCaseResultsInput>, TestCaseUncheckedUpdateWithoutTestCaseResultsInput>
  }

  export type ModelUpdateOneRequiredWithoutTestCaseResultsNestedInput = {
    create?: XOR<ModelCreateWithoutTestCaseResultsInput, ModelUncheckedCreateWithoutTestCaseResultsInput>
    connectOrCreate?: ModelCreateOrConnectWithoutTestCaseResultsInput
    upsert?: ModelUpsertWithoutTestCaseResultsInput
    connect?: ModelWhereUniqueInput
    update?: XOR<XOR<ModelUpdateToOneWithWhereWithoutTestCaseResultsInput, ModelUpdateWithoutTestCaseResultsInput>, ModelUncheckedUpdateWithoutTestCaseResultsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ExperimentCreateWithoutModelInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesCreateNestedManyWithoutExperimentInput
    testCaseResults?: TestCaseResultsCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateWithoutModelInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedCreateNestedManyWithoutExperimentInput
    testCaseResults?: TestCaseResultsUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentCreateOrConnectWithoutModelInput = {
    where: ExperimentWhereUniqueInput
    create: XOR<ExperimentCreateWithoutModelInput, ExperimentUncheckedCreateWithoutModelInput>
  }

  export type ExperimentCreateManyModelInputEnvelope = {
    data: ExperimentCreateManyModelInput | ExperimentCreateManyModelInput[]
    skipDuplicates?: boolean
  }

  export type TestCaseResultsCreateWithoutModelInput = {
    id?: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment: ExperimentCreateNestedOneWithoutTestCaseResultsInput
    testCase: TestCaseCreateNestedOneWithoutTestCaseResultsInput
  }

  export type TestCaseResultsUncheckedCreateWithoutModelInput = {
    id?: string
    experimentId: string
    testCaseId: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultsCreateOrConnectWithoutModelInput = {
    where: TestCaseResultsWhereUniqueInput
    create: XOR<TestCaseResultsCreateWithoutModelInput, TestCaseResultsUncheckedCreateWithoutModelInput>
  }

  export type TestCaseResultsCreateManyModelInputEnvelope = {
    data: TestCaseResultsCreateManyModelInput | TestCaseResultsCreateManyModelInput[]
    skipDuplicates?: boolean
  }

  export type ExperimentUpsertWithWhereUniqueWithoutModelInput = {
    where: ExperimentWhereUniqueInput
    update: XOR<ExperimentUpdateWithoutModelInput, ExperimentUncheckedUpdateWithoutModelInput>
    create: XOR<ExperimentCreateWithoutModelInput, ExperimentUncheckedCreateWithoutModelInput>
  }

  export type ExperimentUpdateWithWhereUniqueWithoutModelInput = {
    where: ExperimentWhereUniqueInput
    data: XOR<ExperimentUpdateWithoutModelInput, ExperimentUncheckedUpdateWithoutModelInput>
  }

  export type ExperimentUpdateManyWithWhereWithoutModelInput = {
    where: ExperimentScalarWhereInput
    data: XOR<ExperimentUpdateManyMutationInput, ExperimentUncheckedUpdateManyWithoutModelInput>
  }

  export type ExperimentScalarWhereInput = {
    AND?: ExperimentScalarWhereInput | ExperimentScalarWhereInput[]
    OR?: ExperimentScalarWhereInput[]
    NOT?: ExperimentScalarWhereInput | ExperimentScalarWhereInput[]
    id?: StringFilter<"Experiment"> | string
    name?: StringFilter<"Experiment"> | string
    description?: StringNullableFilter<"Experiment"> | string | null
    systemPrompt?: StringFilter<"Experiment"> | string
    modelId?: StringFilter<"Experiment"> | string
    createdAt?: DateTimeFilter<"Experiment"> | Date | string
    updatedAt?: DateTimeFilter<"Experiment"> | Date | string
  }

  export type TestCaseResultsUpsertWithWhereUniqueWithoutModelInput = {
    where: TestCaseResultsWhereUniqueInput
    update: XOR<TestCaseResultsUpdateWithoutModelInput, TestCaseResultsUncheckedUpdateWithoutModelInput>
    create: XOR<TestCaseResultsCreateWithoutModelInput, TestCaseResultsUncheckedCreateWithoutModelInput>
  }

  export type TestCaseResultsUpdateWithWhereUniqueWithoutModelInput = {
    where: TestCaseResultsWhereUniqueInput
    data: XOR<TestCaseResultsUpdateWithoutModelInput, TestCaseResultsUncheckedUpdateWithoutModelInput>
  }

  export type TestCaseResultsUpdateManyWithWhereWithoutModelInput = {
    where: TestCaseResultsScalarWhereInput
    data: XOR<TestCaseResultsUpdateManyMutationInput, TestCaseResultsUncheckedUpdateManyWithoutModelInput>
  }

  export type TestCaseResultsScalarWhereInput = {
    AND?: TestCaseResultsScalarWhereInput | TestCaseResultsScalarWhereInput[]
    OR?: TestCaseResultsScalarWhereInput[]
    NOT?: TestCaseResultsScalarWhereInput | TestCaseResultsScalarWhereInput[]
    id?: StringFilter<"TestCaseResults"> | string
    experimentId?: StringFilter<"TestCaseResults"> | string
    testCaseId?: StringFilter<"TestCaseResults"> | string
    modelId?: StringFilter<"TestCaseResults"> | string
    responseText?: StringFilter<"TestCaseResults"> | string
    responseTimeMs?: IntFilter<"TestCaseResults"> | number
    graderType?: StringFilter<"TestCaseResults"> | string
    score?: FloatNullableFilter<"TestCaseResults"> | number | null
    createdAt?: DateTimeFilter<"TestCaseResults"> | Date | string
    updatedAt?: DateTimeFilter<"TestCaseResults"> | Date | string
  }

  export type ModelCreateWithoutExperimentInput = {
    id?: string
    name: string
    provider: string
    createdAt?: Date | string
    updatedAt?: Date | string
    testCaseResults?: TestCaseResultsCreateNestedManyWithoutModelInput
  }

  export type ModelUncheckedCreateWithoutExperimentInput = {
    id?: string
    name: string
    provider: string
    createdAt?: Date | string
    updatedAt?: Date | string
    testCaseResults?: TestCaseResultsUncheckedCreateNestedManyWithoutModelInput
  }

  export type ModelCreateOrConnectWithoutExperimentInput = {
    where: ModelWhereUniqueInput
    create: XOR<ModelCreateWithoutExperimentInput, ModelUncheckedCreateWithoutExperimentInput>
  }

  export type ExperimentTestCasesCreateWithoutExperimentInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    testCase: TestCaseCreateNestedOneWithoutExperimentTestCasesInput
  }

  export type ExperimentTestCasesUncheckedCreateWithoutExperimentInput = {
    id?: string
    testCaseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExperimentTestCasesCreateOrConnectWithoutExperimentInput = {
    where: ExperimentTestCasesWhereUniqueInput
    create: XOR<ExperimentTestCasesCreateWithoutExperimentInput, ExperimentTestCasesUncheckedCreateWithoutExperimentInput>
  }

  export type ExperimentTestCasesCreateManyExperimentInputEnvelope = {
    data: ExperimentTestCasesCreateManyExperimentInput | ExperimentTestCasesCreateManyExperimentInput[]
    skipDuplicates?: boolean
  }

  export type TestCaseResultsCreateWithoutExperimentInput = {
    id?: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    testCase: TestCaseCreateNestedOneWithoutTestCaseResultsInput
    model: ModelCreateNestedOneWithoutTestCaseResultsInput
  }

  export type TestCaseResultsUncheckedCreateWithoutExperimentInput = {
    id?: string
    testCaseId: string
    modelId: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultsCreateOrConnectWithoutExperimentInput = {
    where: TestCaseResultsWhereUniqueInput
    create: XOR<TestCaseResultsCreateWithoutExperimentInput, TestCaseResultsUncheckedCreateWithoutExperimentInput>
  }

  export type TestCaseResultsCreateManyExperimentInputEnvelope = {
    data: TestCaseResultsCreateManyExperimentInput | TestCaseResultsCreateManyExperimentInput[]
    skipDuplicates?: boolean
  }

  export type ModelUpsertWithoutExperimentInput = {
    update: XOR<ModelUpdateWithoutExperimentInput, ModelUncheckedUpdateWithoutExperimentInput>
    create: XOR<ModelCreateWithoutExperimentInput, ModelUncheckedCreateWithoutExperimentInput>
    where?: ModelWhereInput
  }

  export type ModelUpdateToOneWithWhereWithoutExperimentInput = {
    where?: ModelWhereInput
    data: XOR<ModelUpdateWithoutExperimentInput, ModelUncheckedUpdateWithoutExperimentInput>
  }

  export type ModelUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCaseResults?: TestCaseResultsUpdateManyWithoutModelNestedInput
  }

  export type ModelUncheckedUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCaseResults?: TestCaseResultsUncheckedUpdateManyWithoutModelNestedInput
  }

  export type ExperimentTestCasesUpsertWithWhereUniqueWithoutExperimentInput = {
    where: ExperimentTestCasesWhereUniqueInput
    update: XOR<ExperimentTestCasesUpdateWithoutExperimentInput, ExperimentTestCasesUncheckedUpdateWithoutExperimentInput>
    create: XOR<ExperimentTestCasesCreateWithoutExperimentInput, ExperimentTestCasesUncheckedCreateWithoutExperimentInput>
  }

  export type ExperimentTestCasesUpdateWithWhereUniqueWithoutExperimentInput = {
    where: ExperimentTestCasesWhereUniqueInput
    data: XOR<ExperimentTestCasesUpdateWithoutExperimentInput, ExperimentTestCasesUncheckedUpdateWithoutExperimentInput>
  }

  export type ExperimentTestCasesUpdateManyWithWhereWithoutExperimentInput = {
    where: ExperimentTestCasesScalarWhereInput
    data: XOR<ExperimentTestCasesUpdateManyMutationInput, ExperimentTestCasesUncheckedUpdateManyWithoutExperimentInput>
  }

  export type ExperimentTestCasesScalarWhereInput = {
    AND?: ExperimentTestCasesScalarWhereInput | ExperimentTestCasesScalarWhereInput[]
    OR?: ExperimentTestCasesScalarWhereInput[]
    NOT?: ExperimentTestCasesScalarWhereInput | ExperimentTestCasesScalarWhereInput[]
    id?: StringFilter<"ExperimentTestCases"> | string
    experimentId?: StringFilter<"ExperimentTestCases"> | string
    testCaseId?: StringFilter<"ExperimentTestCases"> | string
    createdAt?: DateTimeFilter<"ExperimentTestCases"> | Date | string
    updatedAt?: DateTimeFilter<"ExperimentTestCases"> | Date | string
  }

  export type TestCaseResultsUpsertWithWhereUniqueWithoutExperimentInput = {
    where: TestCaseResultsWhereUniqueInput
    update: XOR<TestCaseResultsUpdateWithoutExperimentInput, TestCaseResultsUncheckedUpdateWithoutExperimentInput>
    create: XOR<TestCaseResultsCreateWithoutExperimentInput, TestCaseResultsUncheckedCreateWithoutExperimentInput>
  }

  export type TestCaseResultsUpdateWithWhereUniqueWithoutExperimentInput = {
    where: TestCaseResultsWhereUniqueInput
    data: XOR<TestCaseResultsUpdateWithoutExperimentInput, TestCaseResultsUncheckedUpdateWithoutExperimentInput>
  }

  export type TestCaseResultsUpdateManyWithWhereWithoutExperimentInput = {
    where: TestCaseResultsScalarWhereInput
    data: XOR<TestCaseResultsUpdateManyMutationInput, TestCaseResultsUncheckedUpdateManyWithoutExperimentInput>
  }

  export type ExperimentTestCasesCreateWithoutTestCaseInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment: ExperimentCreateNestedOneWithoutExperimentTestCasesInput
  }

  export type ExperimentTestCasesUncheckedCreateWithoutTestCaseInput = {
    id?: string
    experimentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExperimentTestCasesCreateOrConnectWithoutTestCaseInput = {
    where: ExperimentTestCasesWhereUniqueInput
    create: XOR<ExperimentTestCasesCreateWithoutTestCaseInput, ExperimentTestCasesUncheckedCreateWithoutTestCaseInput>
  }

  export type ExperimentTestCasesCreateManyTestCaseInputEnvelope = {
    data: ExperimentTestCasesCreateManyTestCaseInput | ExperimentTestCasesCreateManyTestCaseInput[]
    skipDuplicates?: boolean
  }

  export type TestCaseGradersCreateWithoutTestCaseInput = {
    id?: string
    graderType: string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseGradersUncheckedCreateWithoutTestCaseInput = {
    id?: string
    graderType: string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseGradersCreateOrConnectWithoutTestCaseInput = {
    where: TestCaseGradersWhereUniqueInput
    create: XOR<TestCaseGradersCreateWithoutTestCaseInput, TestCaseGradersUncheckedCreateWithoutTestCaseInput>
  }

  export type TestCaseGradersCreateManyTestCaseInputEnvelope = {
    data: TestCaseGradersCreateManyTestCaseInput | TestCaseGradersCreateManyTestCaseInput[]
    skipDuplicates?: boolean
  }

  export type TestCaseResultsCreateWithoutTestCaseInput = {
    id?: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment: ExperimentCreateNestedOneWithoutTestCaseResultsInput
    model: ModelCreateNestedOneWithoutTestCaseResultsInput
  }

  export type TestCaseResultsUncheckedCreateWithoutTestCaseInput = {
    id?: string
    experimentId: string
    modelId: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultsCreateOrConnectWithoutTestCaseInput = {
    where: TestCaseResultsWhereUniqueInput
    create: XOR<TestCaseResultsCreateWithoutTestCaseInput, TestCaseResultsUncheckedCreateWithoutTestCaseInput>
  }

  export type TestCaseResultsCreateManyTestCaseInputEnvelope = {
    data: TestCaseResultsCreateManyTestCaseInput | TestCaseResultsCreateManyTestCaseInput[]
    skipDuplicates?: boolean
  }

  export type ExperimentTestCasesUpsertWithWhereUniqueWithoutTestCaseInput = {
    where: ExperimentTestCasesWhereUniqueInput
    update: XOR<ExperimentTestCasesUpdateWithoutTestCaseInput, ExperimentTestCasesUncheckedUpdateWithoutTestCaseInput>
    create: XOR<ExperimentTestCasesCreateWithoutTestCaseInput, ExperimentTestCasesUncheckedCreateWithoutTestCaseInput>
  }

  export type ExperimentTestCasesUpdateWithWhereUniqueWithoutTestCaseInput = {
    where: ExperimentTestCasesWhereUniqueInput
    data: XOR<ExperimentTestCasesUpdateWithoutTestCaseInput, ExperimentTestCasesUncheckedUpdateWithoutTestCaseInput>
  }

  export type ExperimentTestCasesUpdateManyWithWhereWithoutTestCaseInput = {
    where: ExperimentTestCasesScalarWhereInput
    data: XOR<ExperimentTestCasesUpdateManyMutationInput, ExperimentTestCasesUncheckedUpdateManyWithoutTestCaseInput>
  }

  export type TestCaseGradersUpsertWithWhereUniqueWithoutTestCaseInput = {
    where: TestCaseGradersWhereUniqueInput
    update: XOR<TestCaseGradersUpdateWithoutTestCaseInput, TestCaseGradersUncheckedUpdateWithoutTestCaseInput>
    create: XOR<TestCaseGradersCreateWithoutTestCaseInput, TestCaseGradersUncheckedCreateWithoutTestCaseInput>
  }

  export type TestCaseGradersUpdateWithWhereUniqueWithoutTestCaseInput = {
    where: TestCaseGradersWhereUniqueInput
    data: XOR<TestCaseGradersUpdateWithoutTestCaseInput, TestCaseGradersUncheckedUpdateWithoutTestCaseInput>
  }

  export type TestCaseGradersUpdateManyWithWhereWithoutTestCaseInput = {
    where: TestCaseGradersScalarWhereInput
    data: XOR<TestCaseGradersUpdateManyMutationInput, TestCaseGradersUncheckedUpdateManyWithoutTestCaseInput>
  }

  export type TestCaseGradersScalarWhereInput = {
    AND?: TestCaseGradersScalarWhereInput | TestCaseGradersScalarWhereInput[]
    OR?: TestCaseGradersScalarWhereInput[]
    NOT?: TestCaseGradersScalarWhereInput | TestCaseGradersScalarWhereInput[]
    id?: StringFilter<"TestCaseGraders"> | string
    testCaseId?: StringFilter<"TestCaseGraders"> | string
    graderType?: StringFilter<"TestCaseGraders"> | string
    graderConfig?: JsonNullableFilter<"TestCaseGraders">
    createdAt?: DateTimeFilter<"TestCaseGraders"> | Date | string
    updatedAt?: DateTimeFilter<"TestCaseGraders"> | Date | string
  }

  export type TestCaseResultsUpsertWithWhereUniqueWithoutTestCaseInput = {
    where: TestCaseResultsWhereUniqueInput
    update: XOR<TestCaseResultsUpdateWithoutTestCaseInput, TestCaseResultsUncheckedUpdateWithoutTestCaseInput>
    create: XOR<TestCaseResultsCreateWithoutTestCaseInput, TestCaseResultsUncheckedCreateWithoutTestCaseInput>
  }

  export type TestCaseResultsUpdateWithWhereUniqueWithoutTestCaseInput = {
    where: TestCaseResultsWhereUniqueInput
    data: XOR<TestCaseResultsUpdateWithoutTestCaseInput, TestCaseResultsUncheckedUpdateWithoutTestCaseInput>
  }

  export type TestCaseResultsUpdateManyWithWhereWithoutTestCaseInput = {
    where: TestCaseResultsScalarWhereInput
    data: XOR<TestCaseResultsUpdateManyMutationInput, TestCaseResultsUncheckedUpdateManyWithoutTestCaseInput>
  }

  export type ExperimentCreateWithoutExperimentTestCasesInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    model: ModelCreateNestedOneWithoutExperimentInput
    testCaseResults?: TestCaseResultsCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateWithoutExperimentTestCasesInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    modelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    testCaseResults?: TestCaseResultsUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentCreateOrConnectWithoutExperimentTestCasesInput = {
    where: ExperimentWhereUniqueInput
    create: XOR<ExperimentCreateWithoutExperimentTestCasesInput, ExperimentUncheckedCreateWithoutExperimentTestCasesInput>
  }

  export type TestCaseCreateWithoutExperimentTestCasesInput = {
    id?: string
    inputMessage: string
    expectedOutput?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graders?: TestCaseGradersCreateNestedManyWithoutTestCaseInput
    testCaseResults?: TestCaseResultsCreateNestedManyWithoutTestCaseInput
  }

  export type TestCaseUncheckedCreateWithoutExperimentTestCasesInput = {
    id?: string
    inputMessage: string
    expectedOutput?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graders?: TestCaseGradersUncheckedCreateNestedManyWithoutTestCaseInput
    testCaseResults?: TestCaseResultsUncheckedCreateNestedManyWithoutTestCaseInput
  }

  export type TestCaseCreateOrConnectWithoutExperimentTestCasesInput = {
    where: TestCaseWhereUniqueInput
    create: XOR<TestCaseCreateWithoutExperimentTestCasesInput, TestCaseUncheckedCreateWithoutExperimentTestCasesInput>
  }

  export type ExperimentUpsertWithoutExperimentTestCasesInput = {
    update: XOR<ExperimentUpdateWithoutExperimentTestCasesInput, ExperimentUncheckedUpdateWithoutExperimentTestCasesInput>
    create: XOR<ExperimentCreateWithoutExperimentTestCasesInput, ExperimentUncheckedCreateWithoutExperimentTestCasesInput>
    where?: ExperimentWhereInput
  }

  export type ExperimentUpdateToOneWithWhereWithoutExperimentTestCasesInput = {
    where?: ExperimentWhereInput
    data: XOR<ExperimentUpdateWithoutExperimentTestCasesInput, ExperimentUncheckedUpdateWithoutExperimentTestCasesInput>
  }

  export type ExperimentUpdateWithoutExperimentTestCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    model?: ModelUpdateOneRequiredWithoutExperimentNestedInput
    testCaseResults?: TestCaseResultsUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateWithoutExperimentTestCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCaseResults?: TestCaseResultsUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type TestCaseUpsertWithoutExperimentTestCasesInput = {
    update: XOR<TestCaseUpdateWithoutExperimentTestCasesInput, TestCaseUncheckedUpdateWithoutExperimentTestCasesInput>
    create: XOR<TestCaseCreateWithoutExperimentTestCasesInput, TestCaseUncheckedCreateWithoutExperimentTestCasesInput>
    where?: TestCaseWhereInput
  }

  export type TestCaseUpdateToOneWithWhereWithoutExperimentTestCasesInput = {
    where?: TestCaseWhereInput
    data: XOR<TestCaseUpdateWithoutExperimentTestCasesInput, TestCaseUncheckedUpdateWithoutExperimentTestCasesInput>
  }

  export type TestCaseUpdateWithoutExperimentTestCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graders?: TestCaseGradersUpdateManyWithoutTestCaseNestedInput
    testCaseResults?: TestCaseResultsUpdateManyWithoutTestCaseNestedInput
  }

  export type TestCaseUncheckedUpdateWithoutExperimentTestCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graders?: TestCaseGradersUncheckedUpdateManyWithoutTestCaseNestedInput
    testCaseResults?: TestCaseResultsUncheckedUpdateManyWithoutTestCaseNestedInput
  }

  export type TestCaseCreateWithoutGradersInput = {
    id?: string
    inputMessage: string
    expectedOutput?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesCreateNestedManyWithoutTestCaseInput
    testCaseResults?: TestCaseResultsCreateNestedManyWithoutTestCaseInput
  }

  export type TestCaseUncheckedCreateWithoutGradersInput = {
    id?: string
    inputMessage: string
    expectedOutput?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedCreateNestedManyWithoutTestCaseInput
    testCaseResults?: TestCaseResultsUncheckedCreateNestedManyWithoutTestCaseInput
  }

  export type TestCaseCreateOrConnectWithoutGradersInput = {
    where: TestCaseWhereUniqueInput
    create: XOR<TestCaseCreateWithoutGradersInput, TestCaseUncheckedCreateWithoutGradersInput>
  }

  export type TestCaseUpsertWithoutGradersInput = {
    update: XOR<TestCaseUpdateWithoutGradersInput, TestCaseUncheckedUpdateWithoutGradersInput>
    create: XOR<TestCaseCreateWithoutGradersInput, TestCaseUncheckedCreateWithoutGradersInput>
    where?: TestCaseWhereInput
  }

  export type TestCaseUpdateToOneWithWhereWithoutGradersInput = {
    where?: TestCaseWhereInput
    data: XOR<TestCaseUpdateWithoutGradersInput, TestCaseUncheckedUpdateWithoutGradersInput>
  }

  export type TestCaseUpdateWithoutGradersInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUpdateManyWithoutTestCaseNestedInput
    testCaseResults?: TestCaseResultsUpdateManyWithoutTestCaseNestedInput
  }

  export type TestCaseUncheckedUpdateWithoutGradersInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedUpdateManyWithoutTestCaseNestedInput
    testCaseResults?: TestCaseResultsUncheckedUpdateManyWithoutTestCaseNestedInput
  }

  export type ExperimentCreateWithoutTestCaseResultsInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
    model: ModelCreateNestedOneWithoutExperimentInput
    experimentTestCases?: ExperimentTestCasesCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateWithoutTestCaseResultsInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    modelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentCreateOrConnectWithoutTestCaseResultsInput = {
    where: ExperimentWhereUniqueInput
    create: XOR<ExperimentCreateWithoutTestCaseResultsInput, ExperimentUncheckedCreateWithoutTestCaseResultsInput>
  }

  export type TestCaseCreateWithoutTestCaseResultsInput = {
    id?: string
    inputMessage: string
    expectedOutput?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesCreateNestedManyWithoutTestCaseInput
    graders?: TestCaseGradersCreateNestedManyWithoutTestCaseInput
  }

  export type TestCaseUncheckedCreateWithoutTestCaseResultsInput = {
    id?: string
    inputMessage: string
    expectedOutput?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedCreateNestedManyWithoutTestCaseInput
    graders?: TestCaseGradersUncheckedCreateNestedManyWithoutTestCaseInput
  }

  export type TestCaseCreateOrConnectWithoutTestCaseResultsInput = {
    where: TestCaseWhereUniqueInput
    create: XOR<TestCaseCreateWithoutTestCaseResultsInput, TestCaseUncheckedCreateWithoutTestCaseResultsInput>
  }

  export type ModelCreateWithoutTestCaseResultsInput = {
    id?: string
    name: string
    provider: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Experiment?: ExperimentCreateNestedManyWithoutModelInput
  }

  export type ModelUncheckedCreateWithoutTestCaseResultsInput = {
    id?: string
    name: string
    provider: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Experiment?: ExperimentUncheckedCreateNestedManyWithoutModelInput
  }

  export type ModelCreateOrConnectWithoutTestCaseResultsInput = {
    where: ModelWhereUniqueInput
    create: XOR<ModelCreateWithoutTestCaseResultsInput, ModelUncheckedCreateWithoutTestCaseResultsInput>
  }

  export type ExperimentUpsertWithoutTestCaseResultsInput = {
    update: XOR<ExperimentUpdateWithoutTestCaseResultsInput, ExperimentUncheckedUpdateWithoutTestCaseResultsInput>
    create: XOR<ExperimentCreateWithoutTestCaseResultsInput, ExperimentUncheckedCreateWithoutTestCaseResultsInput>
    where?: ExperimentWhereInput
  }

  export type ExperimentUpdateToOneWithWhereWithoutTestCaseResultsInput = {
    where?: ExperimentWhereInput
    data: XOR<ExperimentUpdateWithoutTestCaseResultsInput, ExperimentUncheckedUpdateWithoutTestCaseResultsInput>
  }

  export type ExperimentUpdateWithoutTestCaseResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    model?: ModelUpdateOneRequiredWithoutExperimentNestedInput
    experimentTestCases?: ExperimentTestCasesUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateWithoutTestCaseResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type TestCaseUpsertWithoutTestCaseResultsInput = {
    update: XOR<TestCaseUpdateWithoutTestCaseResultsInput, TestCaseUncheckedUpdateWithoutTestCaseResultsInput>
    create: XOR<TestCaseCreateWithoutTestCaseResultsInput, TestCaseUncheckedCreateWithoutTestCaseResultsInput>
    where?: TestCaseWhereInput
  }

  export type TestCaseUpdateToOneWithWhereWithoutTestCaseResultsInput = {
    where?: TestCaseWhereInput
    data: XOR<TestCaseUpdateWithoutTestCaseResultsInput, TestCaseUncheckedUpdateWithoutTestCaseResultsInput>
  }

  export type TestCaseUpdateWithoutTestCaseResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUpdateManyWithoutTestCaseNestedInput
    graders?: TestCaseGradersUpdateManyWithoutTestCaseNestedInput
  }

  export type TestCaseUncheckedUpdateWithoutTestCaseResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputMessage?: StringFieldUpdateOperationsInput | string
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedUpdateManyWithoutTestCaseNestedInput
    graders?: TestCaseGradersUncheckedUpdateManyWithoutTestCaseNestedInput
  }

  export type ModelUpsertWithoutTestCaseResultsInput = {
    update: XOR<ModelUpdateWithoutTestCaseResultsInput, ModelUncheckedUpdateWithoutTestCaseResultsInput>
    create: XOR<ModelCreateWithoutTestCaseResultsInput, ModelUncheckedCreateWithoutTestCaseResultsInput>
    where?: ModelWhereInput
  }

  export type ModelUpdateToOneWithWhereWithoutTestCaseResultsInput = {
    where?: ModelWhereInput
    data: XOR<ModelUpdateWithoutTestCaseResultsInput, ModelUncheckedUpdateWithoutTestCaseResultsInput>
  }

  export type ModelUpdateWithoutTestCaseResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Experiment?: ExperimentUpdateManyWithoutModelNestedInput
  }

  export type ModelUncheckedUpdateWithoutTestCaseResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Experiment?: ExperimentUncheckedUpdateManyWithoutModelNestedInput
  }

  export type ExperimentCreateManyModelInput = {
    id?: string
    name: string
    description?: string | null
    systemPrompt: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultsCreateManyModelInput = {
    id?: string
    experimentId: string
    testCaseId: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExperimentUpdateWithoutModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUpdateManyWithoutExperimentNestedInput
    testCaseResults?: TestCaseResultsUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateWithoutModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentTestCases?: ExperimentTestCasesUncheckedUpdateManyWithoutExperimentNestedInput
    testCaseResults?: TestCaseResultsUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateManyWithoutModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    systemPrompt?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultsUpdateWithoutModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneRequiredWithoutTestCaseResultsNestedInput
    testCase?: TestCaseUpdateOneRequiredWithoutTestCaseResultsNestedInput
  }

  export type TestCaseResultsUncheckedUpdateWithoutModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultsUncheckedUpdateManyWithoutModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentTestCasesCreateManyExperimentInput = {
    id?: string
    testCaseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultsCreateManyExperimentInput = {
    id?: string
    testCaseId: string
    modelId: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExperimentTestCasesUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCase?: TestCaseUpdateOneRequiredWithoutExperimentTestCasesNestedInput
  }

  export type ExperimentTestCasesUncheckedUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentTestCasesUncheckedUpdateManyWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultsUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCase?: TestCaseUpdateOneRequiredWithoutTestCaseResultsNestedInput
    model?: ModelUpdateOneRequiredWithoutTestCaseResultsNestedInput
  }

  export type TestCaseResultsUncheckedUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultsUncheckedUpdateManyWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCaseId?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentTestCasesCreateManyTestCaseInput = {
    id?: string
    experimentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseGradersCreateManyTestCaseInput = {
    id?: string
    graderType: string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultsCreateManyTestCaseInput = {
    id?: string
    experimentId: string
    modelId: string
    responseText: string
    responseTimeMs: number
    graderType: string
    score?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExperimentTestCasesUpdateWithoutTestCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneRequiredWithoutExperimentTestCasesNestedInput
  }

  export type ExperimentTestCasesUncheckedUpdateWithoutTestCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentTestCasesUncheckedUpdateManyWithoutTestCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseGradersUpdateWithoutTestCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    graderType?: StringFieldUpdateOperationsInput | string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseGradersUncheckedUpdateWithoutTestCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    graderType?: StringFieldUpdateOperationsInput | string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseGradersUncheckedUpdateManyWithoutTestCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    graderType?: StringFieldUpdateOperationsInput | string
    graderConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultsUpdateWithoutTestCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneRequiredWithoutTestCaseResultsNestedInput
    model?: ModelUpdateOneRequiredWithoutTestCaseResultsNestedInput
  }

  export type TestCaseResultsUncheckedUpdateWithoutTestCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultsUncheckedUpdateManyWithoutTestCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: StringFieldUpdateOperationsInput | string
    modelId?: StringFieldUpdateOperationsInput | string
    responseText?: StringFieldUpdateOperationsInput | string
    responseTimeMs?: IntFieldUpdateOperationsInput | number
    graderType?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}